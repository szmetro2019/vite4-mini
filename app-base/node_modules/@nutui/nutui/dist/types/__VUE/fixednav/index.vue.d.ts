import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    navList: {
        default: () => never[];
        type: import("vue").PropType<any[]>;
    };
    activeColor: {
        default: string;
        type: StringConstructor;
    };
    activeText: {
        default: string;
        type: StringConstructor;
    };
    unActiveText: {
        default: string;
        type: StringConstructor;
    };
    position: {
        default: () => {
            top: string;
            bottom: string;
        };
        type: ObjectConstructor;
    };
    type: {
        default: string;
        type: StringConstructor;
    };
}, {
    classes: import("vue").ComputedRef<{
        [x: string]: any;
        [x: number]: boolean;
        active: any;
    }>;
    updateValue: (value?: boolean) => void;
    selected: (item: any, event: Event) => void;
    translate: (keyPath: string, ...args: unknown[]) => string;
    current: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    visible?: unknown;
    overlay?: unknown;
    navList?: unknown;
    activeColor?: unknown;
    activeText?: unknown;
    unActiveText?: unknown;
    position?: unknown;
    type?: unknown;
} & {
    type: string;
    overlay: boolean;
    visible: boolean;
    position: Record<string, any>;
    navList: any[];
    activeColor: string;
    activeText: string;
    unActiveText: string;
} & {}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    overlay: boolean;
    visible: boolean;
    position: Record<string, any>;
    navList: any[];
    activeColor: string;
    activeText: string;
    unActiveText: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutFixedNav: typeof _sfc_main;
  }
}     
      