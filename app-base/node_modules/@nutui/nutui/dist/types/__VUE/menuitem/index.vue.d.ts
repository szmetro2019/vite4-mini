import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    title: StringConstructor;
    options: {
        type: PropType<import("./type").MenuItemOption[]>;
        default: never[];
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: PropType<unknown>;
    cols: {
        type: NumberConstructor;
        default: number;
    };
    activeTitleClass: StringConstructor;
    inactiveTitleClass: StringConstructor;
    optionIcon: {
        type: StringConstructor;
        default: string;
    };
    classPrefix: {
        type: StringConstructor;
        default: string;
    };
}, {
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    placeholderElementStyle: import("vue").ComputedRef<{
        height: string;
    } | {
        top: string;
        height: string;
    }>;
    renderTitle: () => any;
    state: {
        showPopup: boolean;
        transition: boolean;
        showWrapper: boolean;
        isShowPlaceholderElement: boolean;
    };
    parent: any;
    toggle: (show?: boolean, options?: {
        immediate?: boolean;
    }) => void;
    onClick: (option: import('./type').MenuItemOption) => void;
    handleClose: () => void;
    handleClickOutside: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("open" | "close" | "change" | "update:modelValue")[], "open" | "close" | "change" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
    options?: unknown;
    disabled?: unknown;
    modelValue?: unknown;
    cols?: unknown;
    activeTitleClass?: unknown;
    inactiveTitleClass?: unknown;
    optionIcon?: unknown;
    classPrefix?: unknown;
} & {
    classPrefix: string;
    disabled: boolean;
    options: import("./type").MenuItemOption[];
    cols: number;
    optionIcon: string;
} & {
    title?: string | undefined;
    activeTitleClass?: string | undefined;
    inactiveTitleClass?: string | undefined;
    modelValue?: unknown;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}, {
    classPrefix: string;
    disabled: boolean;
    options: import("./type").MenuItemOption[];
    cols: number;
    optionIcon: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutMenuItem: typeof _sfc_main;
  }
}     
      