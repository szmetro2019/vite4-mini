import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    size: {
        type: StringConstructor;
        default: string;
    };
    shape: {
        type: StringConstructor;
        default: string;
    };
    bgColor: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    url: {
        type: StringConstructor;
        default: string;
    };
    alt: {
        type: StringConstructor;
        default: string;
    };
    icon: {
        type: StringConstructor;
        default: string;
    };
}, {
    index: import("vue").Ref<number>;
    showMax: import("vue").Ref<boolean>;
    maxIndex: import("vue").Ref<number>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    styles: import("vue").ComputedRef<{
        width: string;
        height: string;
        backgroundColor: string;
        color: string;
        marginLeft: string | false;
        zIndex: string;
    }>;
    iconStyles: import("vue").ComputedRef<string>;
    isShowText: import("vue").ComputedRef<import("vue").Slot | undefined>;
    maxStyles: import("vue").ComputedRef<{
        backgroundColor: string;
        color: string;
    }>;
    activeAvatar: (event: MouseEvent) => void;
    onError: (event: MouseEvent) => void;
    avatarGroup: any;
    visible: {
        lightTheme: boolean;
    };
    avatarRef: import("vue").Ref<null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("active-avatar" | "onError")[], "onError" | "active-avatar", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    size?: unknown;
    shape?: unknown;
    bgColor?: unknown;
    color?: unknown;
    url?: unknown;
    alt?: unknown;
    icon?: unknown;
} & {
    url: string;
    icon: string;
    size: string;
    color: string;
    shape: string;
    alt: string;
    bgColor: string;
} & {}> & {
    "onActive-avatar"?: ((...args: any[]) => any) | undefined;
    onOnError?: ((...args: any[]) => any) | undefined;
}, {
    url: string;
    icon: string;
    size: string;
    color: string;
    shape: string;
    alt: string;
    bgColor: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutAvatar: typeof _sfc_main;
  }
}     
      