import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    count: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    modelValue: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    iconSize: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    voidColor: {
        type: StringConstructor;
        default: string;
    };
    uncheckedIcon: {
        type: StringConstructor;
        default: string;
    };
    checkedIcon: {
        type: StringConstructor;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    allowHalf: {
        type: BooleanConstructor;
        default: boolean;
    };
    touchable: {
        type: BooleanConstructor;
        default: boolean;
    };
    spacing: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    classPrefix: {
        type: StringConstructor;
        default: string;
    };
    fontClassName: {
        type: StringConstructor;
        default: string;
    };
}, {
    onClick: (e: number, index: number) => void;
    pxCheck: (value: string | number) => string;
    rateRefs: import("vue").Ref<HTMLElement[]>;
    refRandomId: string;
    onTouchStart(event: Event): void;
    onTouchMove(event: Event): void;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    count?: unknown;
    modelValue?: unknown;
    iconSize?: unknown;
    activeColor?: unknown;
    voidColor?: unknown;
    uncheckedIcon?: unknown;
    checkedIcon?: unknown;
    readonly?: unknown;
    disabled?: unknown;
    allowHalf?: unknown;
    touchable?: unknown;
    spacing?: unknown;
    classPrefix?: unknown;
    fontClassName?: unknown;
} & {
    classPrefix: string;
    fontClassName: string;
    disabled: boolean;
    iconSize: string | number;
    activeColor: string;
    modelValue: string | number;
    count: string | number;
    readonly: boolean;
    voidColor: string;
    uncheckedIcon: string;
    checkedIcon: string;
    allowHalf: boolean;
    touchable: boolean;
    spacing: string | number;
} & {}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    classPrefix: string;
    fontClassName: string;
    disabled: boolean;
    iconSize: string | number;
    activeColor: string;
    modelValue: string | number;
    count: string | number;
    readonly: boolean;
    voidColor: string;
    uncheckedIcon: string;
    checkedIcon: string;
    allowHalf: boolean;
    touchable: boolean;
    spacing: string | number;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutRate: typeof _sfc_main;
  }
}     
      