import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
import { Ref } from 'vue';
export declare const component: {
    props: {
        count: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        modelValue: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        iconSize: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        activeColor: {
            type: StringConstructor;
            default: string;
        };
        voidColor: {
            type: StringConstructor;
            default: string;
        };
        uncheckedIcon: {
            type: StringConstructor;
            default: string;
        };
        checkedIcon: {
            type: StringConstructor;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowHalf: {
            type: BooleanConstructor;
            default: boolean;
        };
        touchable: {
            type: BooleanConstructor;
            default: boolean;
        };
        spacing: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        classPrefix: {
            type: StringConstructor;
            default: string;
        };
        fontClassName: {
            type: StringConstructor;
            default: string;
        };
    };
    emits: string[];
    setup(props: any, { emit }: any): {
        onClick: (e: number, index: number) => void;
        pxCheck: (value: string | number) => string;
        rateRefs: Ref<HTMLElement[]>;
        refRandomId: string;
        onTouchStart(event: Event): void;
        onTouchMove(event: Event): void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    };
};
export declare const taroComponent: {
    props: {
        count: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        modelValue: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        iconSize: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        activeColor: {
            type: StringConstructor;
            default: string;
        };
        voidColor: {
            type: StringConstructor;
            default: string;
        };
        uncheckedIcon: {
            type: StringConstructor;
            default: string;
        };
        checkedIcon: {
            type: StringConstructor;
            default: string;
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        disabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        allowHalf: {
            type: BooleanConstructor;
            default: boolean;
        };
        touchable: {
            type: BooleanConstructor;
            default: boolean;
        };
        spacing: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        classPrefix: {
            type: StringConstructor;
            default: string;
        };
        fontClassName: {
            type: StringConstructor;
            default: string;
        };
    };
    emits: string[];
    setup(props: any, { emit }: any): {
        onClick: (e: number, index: number) => void;
        pxCheck: (value: string | number) => string;
        rateRefs: Ref<HTMLElement[]>;
        refRandomId: string;
        onTouchStart(event: Event): void;
        onTouchMove(event: Event): void;
        classes: import("vue").ComputedRef<{
            [x: string]: boolean;
        }>;
    };
};
