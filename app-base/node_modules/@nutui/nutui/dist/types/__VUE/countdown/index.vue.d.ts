import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    modelValue: {
        type: ObjectConstructor;
        default: () => {};
    };
    paused: {
        default: boolean;
        type: BooleanConstructor;
    };
    startTime: {
        type: (NumberConstructor | StringConstructor)[];
        validator(v: unknown): boolean;
    };
    endTime: {
        type: (NumberConstructor | StringConstructor)[];
        validator(v: unknown): boolean;
    };
    millisecond: {
        default: boolean;
        type: BooleanConstructor;
    };
    format: {
        type: StringConstructor;
        default: string;
    };
    autoStart: {
        type: BooleanConstructor;
        default: boolean;
    };
    time: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
}, {
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    start: () => void;
    pause: () => void;
    renderTime: import("vue").ComputedRef<any>;
    translate: (keyPath: string, ...args: unknown[]) => string;
    reset: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("input" | "update:modelValue" | "on-end" | "on-restart" | "on-paused")[], "input" | "update:modelValue" | "on-end" | "on-restart" | "on-paused", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    paused?: unknown;
    startTime?: unknown;
    endTime?: unknown;
    millisecond?: unknown;
    format?: unknown;
    autoStart?: unknown;
    time?: unknown;
} & {
    time: string | number;
    paused: boolean;
    modelValue: Record<string, any>;
    millisecond: boolean;
    format: string;
    autoStart: boolean;
} & {
    startTime?: string | number | undefined;
    endTime?: string | number | undefined;
}> & {
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    "onOn-end"?: ((...args: any[]) => any) | undefined;
    "onOn-restart"?: ((...args: any[]) => any) | undefined;
    "onOn-paused"?: ((...args: any[]) => any) | undefined;
}, {
    time: string | number;
    paused: boolean;
    modelValue: Record<string, any>;
    millisecond: boolean;
    format: string;
    autoStart: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutCountDown: typeof _sfc_main;
  }
}     
      