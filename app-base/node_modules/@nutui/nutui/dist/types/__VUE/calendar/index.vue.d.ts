import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    type: {
        type: StringConstructor;
        default: string;
    };
    isAutoBackFill: {
        type: BooleanConstructor;
        default: boolean;
    };
    toDateAnimation: {
        type: BooleanConstructor;
        default: boolean;
    };
    poppable: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSubTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    showToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    confirmText: {
        type: StringConstructor;
        default: string;
    };
    startText: {
        type: StringConstructor;
        default: string;
    };
    endText: {
        type: StringConstructor;
        default: string;
    };
    defaultValue: {
        type: (StringConstructor | ArrayConstructor)[];
    };
    startDate: {
        type: StringConstructor;
        default: string;
    };
    endDate: {
        type: StringConstructor;
        default: string;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        default: number;
        validator: (val: number) => boolean;
    };
}, {
    closePopup: () => void;
    update: () => void;
    close: () => void;
    choose: (param: string) => void;
    select: (param: string) => void;
    calendarRef: import("vue").Ref<HTMLElement | null>;
    showTopBtn: import("vue").ComputedRef<import("vue").Slot | undefined>;
    topInfo: import("vue").ComputedRef<import("vue").Slot | undefined>;
    dayInfo: import("vue").ComputedRef<import("vue").Slot | undefined>;
    bottomInfo: import("vue").ComputedRef<import("vue").Slot | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select" | "update:visible" | "close" | "choose")[], "select" | "update:visible" | "close" | "choose", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    isAutoBackFill?: unknown;
    toDateAnimation?: unknown;
    poppable?: unknown;
    showTitle?: unknown;
    showSubTitle?: unknown;
    visible?: unknown;
    showToday?: unknown;
    title?: unknown;
    confirmText?: unknown;
    startText?: unknown;
    endText?: unknown;
    defaultValue?: unknown;
    startDate?: unknown;
    endDate?: unknown;
    firstDayOfWeek?: unknown;
} & {
    type: string;
    title: string;
    visible: boolean;
    poppable: boolean;
    isAutoBackFill: boolean;
    toDateAnimation: boolean;
    showTitle: boolean;
    showSubTitle: boolean;
    showToday: boolean;
    confirmText: string;
    startText: string;
    endText: string;
    startDate: string;
    endDate: string;
    firstDayOfWeek: number;
} & {
    defaultValue?: string | unknown[] | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    onChoose?: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    title: string;
    visible: boolean;
    poppable: boolean;
    isAutoBackFill: boolean;
    toDateAnimation: boolean;
    showTitle: boolean;
    showSubTitle: boolean;
    showToday: boolean;
    confirmText: string;
    startText: string;
    endText: string;
    startDate: string;
    endDate: string;
    firstDayOfWeek: number;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutCalendar: typeof _sfc_main;
  }
}     
      