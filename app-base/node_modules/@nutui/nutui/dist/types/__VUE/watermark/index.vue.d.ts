import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    name: {
        type: StringConstructor;
        default: string;
    };
    gapY: {
        type: NumberConstructor;
        default: number;
    };
    gapX: {
        type: NumberConstructor;
        default: number;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    width: {
        type: NumberConstructor;
        default: number;
    };
    height: {
        type: NumberConstructor;
        default: number;
    };
    rotate: {
        type: NumberConstructor;
        default: number;
    };
    image: {
        type: StringConstructor;
        default: string;
    };
    imageWidth: {
        type: NumberConstructor;
        default: number;
    };
    imageHeight: {
        type: NumberConstructor;
        default: number;
    };
    content: {
        type: StringConstructor;
        default: string;
    };
    fontColor: {
        type: StringConstructor;
        default: string;
    };
    fontStyle: {
        type: StringConstructor;
        default: string;
    };
    fontFamily: {
        type: StringConstructor;
        default: string;
    };
    fontWeight: {
        type: StringConstructor;
        default: string;
    };
    fontSize: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    fullPage: {
        type: BooleanConstructor;
        default: string;
    };
}, {
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    base64Url: import("vue").Ref<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    name?: unknown;
    gapY?: unknown;
    gapX?: unknown;
    zIndex?: unknown;
    width?: unknown;
    height?: unknown;
    rotate?: unknown;
    image?: unknown;
    imageWidth?: unknown;
    imageHeight?: unknown;
    content?: unknown;
    fontColor?: unknown;
    fontStyle?: unknown;
    fontFamily?: unknown;
    fontWeight?: unknown;
    fontSize?: unknown;
    fullPage?: unknown;
} & {
    name: string;
    zIndex: number;
    content: string;
    image: string;
    width: number;
    height: number;
    rotate: number;
    gapY: number;
    gapX: number;
    imageWidth: number;
    imageHeight: number;
    fontColor: string;
    fontStyle: string;
    fontFamily: string;
    fontWeight: string;
    fontSize: string | number;
    fullPage: boolean;
} & {}> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    name: string;
    zIndex: number;
    content: string;
    image: string;
    width: number;
    height: number;
    rotate: number;
    gapY: number;
    gapX: number;
    imageWidth: number;
    imageHeight: number;
    fontColor: string;
    fontStyle: string;
    fontFamily: string;
    fontWeight: string;
    fontSize: string | number;
    fullPage: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutWaterMark: typeof _sfc_main;
  }
}     
      