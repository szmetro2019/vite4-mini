import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    content: {
        type: PropType<string>;
        default: string;
    };
    noFooter: {
        type: BooleanConstructor;
        default: boolean;
    };
    noOkBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    noCancelBtn: {
        type: BooleanConstructor;
        default: boolean;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
    okText: {
        type: StringConstructor;
        default: string;
    };
    cancelAutoClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    textAlign: {
        type: StringConstructor;
        default: string;
    };
    closeOnPopstate: {
        type: BooleanConstructor;
        default: boolean;
    };
    footerDirection: {
        type: StringConstructor;
        default: string;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    popStyle: {
        type: PropType<CSSProperties>;
    };
    beforeClose: PropType<Interceptor>;
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    duration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    transition: {
        type: StringConstructor;
        default: string;
    };
    style: {
        type: PropType<CSSProperties>;
        default: {};
    };
    popClass: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeIconPosition: {
        type: StringConstructor;
        default: string;
    };
    closeIcon: {
        type: StringConstructor;
        default: string;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: (StringConstructor | {
            new (): Element;
            prototype: Element;
        })[];
        default: string;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleportDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    safeAreaInsetBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayClass: {
        type: StringConstructor;
        default: string;
    };
    overlayStyle: {
        type: PropType<CSSProperties>;
    };
}, {
    closed: (action: string) => void;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    onCancel: () => void;
    onOk: () => void;
    showPopup: import("vue").Ref<boolean>;
    onClickOverlay: () => void;
    translate: (keyPath: string, ...args: unknown[]) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "closed" | "update" | "ok" | "cancel" | "opened")[], "update:visible" | "closed" | "opened" | "update" | "ok" | "cancel", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    closeOnClickOverlay?: unknown;
    title?: unknown;
    content?: unknown;
    noFooter?: unknown;
    noOkBtn?: unknown;
    noCancelBtn?: unknown;
    cancelText?: unknown;
    okText?: unknown;
    cancelAutoClose?: unknown;
    textAlign?: unknown;
    closeOnPopstate?: unknown;
    footerDirection?: unknown;
    customClass?: unknown;
    popStyle?: unknown;
    beforeClose?: unknown;
    visible?: unknown;
    zIndex?: unknown;
    duration?: unknown;
    lockScroll?: unknown;
    position?: unknown;
    transition?: unknown;
    style?: unknown;
    popClass?: unknown;
    closeable?: unknown;
    closeIconPosition?: unknown;
    closeIcon?: unknown;
    destroyOnClose?: unknown;
    teleport?: unknown;
    overlay?: unknown;
    round?: unknown;
    teleportDisable?: unknown;
    safeAreaInsetBottom?: unknown;
    overlayClass?: unknown;
    overlayStyle?: unknown;
} & {
    title: string;
    style: CSSProperties;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    zIndex: string | number;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    content: string;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    cancelText: string;
    okText: string;
    textAlign: string;
    noFooter: boolean;
    noOkBtn: boolean;
    noCancelBtn: boolean;
    cancelAutoClose: boolean;
    closeOnPopstate: boolean;
    footerDirection: string;
    customClass: string;
} & {
    overlayStyle?: CSSProperties | undefined;
    popStyle?: CSSProperties | undefined;
    beforeClose?: Interceptor | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onOpened?: ((...args: any[]) => any) | undefined;
    onClosed?: ((...args: any[]) => any) | undefined;
    onUpdate?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    style: CSSProperties;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    zIndex: string | number;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    content: string;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    cancelText: string;
    okText: string;
    textAlign: string;
    noFooter: boolean;
    noOkBtn: boolean;
    noCancelBtn: boolean;
    cancelAutoClose: boolean;
    closeOnPopstate: boolean;
    footerDirection: string;
    customClass: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutDialog: typeof _sfc_main;
  }
}     
      