import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    textAlign: {
        type: StringConstructor;
        default: string;
    };
    limitShow: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxLength: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    rows: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    autosize: {
        type: (ObjectConstructor | BooleanConstructor)[];
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    textareaRef: import("vue").Ref<any>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    styles: any;
    change: (event: Event) => void;
    focus: (event: Event) => void;
    blur: (event: Event) => void;
    translate: (keyPath: string, ...args: unknown[]) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "blur" | "focus" | "update:modelValue")[], "change" | "blur" | "focus" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    textAlign?: unknown;
    limitShow?: unknown;
    maxLength?: unknown;
    rows?: unknown;
    placeholder?: unknown;
    readonly?: unknown;
    disabled?: unknown;
    autosize?: unknown;
    autofocus?: unknown;
} & {
    disabled: boolean;
    placeholder: string;
    modelValue: string | number;
    maxLength: string | number;
    autofocus: boolean;
    readonly: boolean;
    rows: string | number;
    textAlign: string;
    limitShow: boolean;
    autosize: boolean | Record<string, any>;
} & {}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    placeholder: string;
    modelValue: string | number;
    maxLength: string | number;
    autofocus: boolean;
    readonly: boolean;
    rows: string | number;
    textAlign: string;
    limitShow: boolean;
    autosize: boolean | Record<string, any>;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutTextArea: typeof _sfc_main;
  }
}     
      