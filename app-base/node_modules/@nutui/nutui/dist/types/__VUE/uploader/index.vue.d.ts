import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    name: {
        type: StringConstructor;
        default: string;
    };
    url: {
        type: StringConstructor;
        default: string;
    };
    timeout: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    fileList: {
        type: ArrayConstructor;
        default: () => never[];
    };
    isPreview: {
        type: BooleanConstructor;
        default: boolean;
    };
    listType: {
        type: StringConstructor;
        default: string;
    };
    isDeletable: {
        type: BooleanConstructor;
        default: boolean;
    };
    method: {
        type: StringConstructor;
        default: string;
    };
    capture: {
        type: BooleanConstructor;
        default: boolean;
    };
    maximize: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    maximum: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    clearInput: {
        type: BooleanConstructor;
        default: boolean;
    };
    accept: {
        type: StringConstructor;
        default: string;
    };
    headers: {
        type: ObjectConstructor;
        default: {};
    };
    data: {
        type: ObjectConstructor;
        default: {};
    };
    uploadIcon: {
        type: StringConstructor;
        default: string;
    };
    uploadIconSize: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    xhrState: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    withCredentials: {
        type: BooleanConstructor;
        default: boolean;
    };
    multiple: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoUpload: {
        type: BooleanConstructor;
        default: boolean;
    };
    deleteIcon: {
        type: StringConstructor;
        default: string;
    };
    beforeUpload: {
        type: FunctionConstructor;
        default: null;
    };
    beforeXhrUpload: {
        type: FunctionConstructor;
        default: null;
    };
    beforeDelete: {
        type: PropType<Interceptor>;
        default: (file: import('./type').FileItem, files: import('./type').FileItem[]) => boolean;
    };
    onChange: {
        type: FunctionConstructor;
    };
}, {
    onChange: (event: InputEvent) => void;
    onDelete: (file: import('./type').FileItem, index: number) => void;
    fileList: FileItem[];
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    fileItemClick: (fileItem: import('./type').FileItem) => void;
    clearUploadQueue: (index?: number) => void;
    submit: () => void;
    renderInput: () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("progress" | "success" | "start" | "change" | "failure" | "oversize" | "delete" | "update:fileList" | "file-item-click")[], "progress" | "success" | "start" | "change" | "failure" | "oversize" | "delete" | "update:fileList" | "file-item-click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    name?: unknown;
    url?: unknown;
    timeout?: unknown;
    fileList?: unknown;
    isPreview?: unknown;
    listType?: unknown;
    isDeletable?: unknown;
    method?: unknown;
    capture?: unknown;
    maximize?: unknown;
    maximum?: unknown;
    clearInput?: unknown;
    accept?: unknown;
    headers?: unknown;
    data?: unknown;
    uploadIcon?: unknown;
    uploadIconSize?: unknown;
    xhrState?: unknown;
    withCredentials?: unknown;
    multiple?: unknown;
    disabled?: unknown;
    autoUpload?: unknown;
    deleteIcon?: unknown;
    beforeUpload?: unknown;
    beforeXhrUpload?: unknown;
    beforeDelete?: unknown;
    onChange?: unknown;
} & {
    name: string;
    url: string;
    data: Record<string, any>;
    disabled: boolean;
    maximum: string | number;
    multiple: boolean;
    timeout: string | number;
    fileList: unknown[];
    isPreview: boolean;
    listType: string;
    isDeletable: boolean;
    method: string;
    capture: boolean;
    maximize: string | number;
    clearInput: boolean;
    accept: string;
    headers: Record<string, any>;
    uploadIcon: string;
    uploadIconSize: string | number;
    xhrState: string | number;
    withCredentials: boolean;
    autoUpload: boolean;
    deleteIcon: string;
    beforeUpload: Function;
    beforeXhrUpload: Function;
    beforeDelete: Interceptor;
} & {
    onChange?: Function | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    onProgress?: ((...args: any[]) => any) | undefined;
    onSuccess?: ((...args: any[]) => any) | undefined;
    onStart?: ((...args: any[]) => any) | undefined;
    onFailure?: ((...args: any[]) => any) | undefined;
    onOversize?: ((...args: any[]) => any) | undefined;
    onDelete?: ((...args: any[]) => any) | undefined;
    "onUpdate:fileList"?: ((...args: any[]) => any) | undefined;
    "onFile-item-click"?: ((...args: any[]) => any) | undefined;
}, {
    name: string;
    url: string;
    data: Record<string, any>;
    disabled: boolean;
    maximum: string | number;
    multiple: boolean;
    timeout: string | number;
    fileList: unknown[];
    isPreview: boolean;
    listType: string;
    isDeletable: boolean;
    method: string;
    capture: boolean;
    maximize: string | number;
    clearInput: boolean;
    accept: string;
    headers: Record<string, any>;
    uploadIcon: string;
    uploadIconSize: string | number;
    xhrState: string | number;
    withCredentials: boolean;
    autoUpload: boolean;
    deleteIcon: string;
    beforeUpload: Function;
    beforeXhrUpload: Function;
    beforeDelete: Interceptor;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutUploader: typeof _sfc_main;
  }
}     
      