import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    type: {
        type: StringConstructor;
        default: string;
    };
    isAutoBackFill: {
        type: BooleanConstructor;
        default: boolean;
    };
    toDateAnimation: {
        type: BooleanConstructor;
        default: boolean;
    };
    poppable: {
        type: BooleanConstructor;
        default: boolean;
    };
    showTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    showSubTitle: {
        type: BooleanConstructor;
        default: boolean;
    };
    showToday: {
        type: BooleanConstructor;
        default: boolean;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    confirmText: {
        type: StringConstructor;
        default: string;
    };
    startText: {
        type: StringConstructor;
        default: string;
    };
    endText: {
        type: StringConstructor;
        default: string;
    };
    defaultValue: {
        type: PropType<string>;
        default: string;
    };
    startDate: {
        type: StringConstructor;
        default: string;
    };
    endDate: {
        type: StringConstructor;
        default: string;
    };
    firstDayOfWeek: {
        type: NumberConstructor;
        default: number;
    };
}, {
    translate: (keyPath: string, ...args: unknown[]) => string;
    type: import("vue").Ref<string>;
    title: import("vue").Ref<string>;
    onClose: import("vue").Ref<((...args: any[]) => any) | undefined>;
    poppable: import("vue").Ref<boolean>;
    onSelect: import("vue").Ref<((...args: any[]) => any) | undefined>;
    onChoose: import("vue").Ref<((...args: any[]) => any) | undefined>;
    onUpdate: import("vue").Ref<((...args: any[]) => any) | undefined>;
    isAutoBackFill: import("vue").Ref<boolean>;
    toDateAnimation: import("vue").Ref<boolean>;
    showTitle: import("vue").Ref<boolean>;
    showSubTitle: import("vue").Ref<boolean>;
    showToday: import("vue").Ref<boolean>;
    confirmText: import("vue").Ref<string>;
    startText: import("vue").Ref<string>;
    endText: import("vue").Ref<string>;
    defaultValue: import("vue").Ref<string>;
    startDate: import("vue").Ref<string>;
    endDate: import("vue").Ref<string>;
    firstDayOfWeek: import("vue").Ref<number>;
    yearMonthTitle: import("vue").Ref<string>;
    currDate: import("vue").Ref<string | string[]>;
    propStartDate: import("vue").Ref<string>;
    propEndDate: import("vue").Ref<string>;
    currentIndex: import("vue").Ref<number>;
    unLoadPrev: import("vue").Ref<boolean>;
    touchParams: import("vue").Ref<TouchParam>;
    transformY: import("vue").Ref<number>;
    translateY: import("vue").Ref<number>;
    scrollDistance: import("vue").Ref<number>;
    defaultData: import("vue").Ref<InputDate>;
    chooseData: import("vue").Ref<(string | string[])[]>;
    monthsData: import("vue").Ref<MonthInfo[]>;
    dayPrefix: import("vue").Ref<string>;
    startData: import("vue").Ref<InputDate>;
    endData: import("vue").Ref<InputDate>;
    isRange: import("vue").Ref<boolean>;
    timer: import("vue").Ref<number>;
    avgHeight: import("vue").Ref<number>;
    monthsNum: import("vue").Ref<number>;
    defaultRange: import("vue").Ref<number[]>;
    weeks: import("vue").Ref<string[]>;
    compConthsData: import("vue").ComputedRef<MonthInfo[]>;
    showTopBtn: import("vue").ComputedRef<import("vue").Slot | undefined>;
    topInfo: import("vue").ComputedRef<import("vue").Slot | undefined>;
    bottomInfo: import("vue").ComputedRef<import("vue").Slot | undefined>;
    rangeTip: () => boolean | undefined;
    mothsViewScroll: (e: Event) => void;
    getClass: (day: Day, month: MonthInfo) => string | null;
    isStartTip: (day: Day, month: MonthInfo) => boolean;
    isEndTip: (day: Day, month: MonthInfo) => boolean;
    chooseDay: (day: Day, month: MonthInfo, isFirst: boolean) => void;
    isCurrDay: (dateInfo: DateInfo) => boolean;
    confirm: () => void;
    monthsPanel: import("vue").Ref<HTMLElement | null>;
    months: import("vue").Ref<HTMLElement | null>;
    weeksPanel: import("vue").Ref<HTMLElement | null>;
    viewArea: import("vue").Ref<HTMLElement | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("select" | "close" | "choose" | "update")[], "select" | "close" | "choose" | "update", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    type?: unknown;
    isAutoBackFill?: unknown;
    toDateAnimation?: unknown;
    poppable?: unknown;
    showTitle?: unknown;
    showSubTitle?: unknown;
    showToday?: unknown;
    title?: unknown;
    confirmText?: unknown;
    startText?: unknown;
    endText?: unknown;
    defaultValue?: unknown;
    startDate?: unknown;
    endDate?: unknown;
    firstDayOfWeek?: unknown;
} & {
    type: string;
    title: string;
    poppable: boolean;
    isAutoBackFill: boolean;
    toDateAnimation: boolean;
    showTitle: boolean;
    showSubTitle: boolean;
    showToday: boolean;
    confirmText: string;
    startText: string;
    endText: string;
    defaultValue: string;
    startDate: string;
    endDate: string;
    firstDayOfWeek: number;
} & {}> & {
    onClose?: ((...args: any[]) => any) | undefined;
    onSelect?: ((...args: any[]) => any) | undefined;
    onChoose?: ((...args: any[]) => any) | undefined;
    onUpdate?: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    title: string;
    poppable: boolean;
    isAutoBackFill: boolean;
    toDateAnimation: boolean;
    showTitle: boolean;
    showSubTitle: boolean;
    showToday: boolean;
    confirmText: string;
    startText: string;
    endText: string;
    defaultValue: string;
    startDate: string;
    endDate: string;
    firstDayOfWeek: number;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutCalendarItem: typeof _sfc_main;
  }
}     
      