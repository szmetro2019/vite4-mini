import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    cancelTxt: {
        type: StringConstructor;
        default: string;
    };
    optionTag: {
        type: StringConstructor;
        default: string;
    };
    optionSubTag: {
        type: StringConstructor;
        default: string;
    };
    chooseTagValue: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    description: {
        type: StringConstructor;
        default: string;
    };
    menuItems: {
        type: ArrayConstructor;
        default: () => never[];
    };
    isWrapTeleport: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeAbled: {
        type: BooleanConstructor;
        default: boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    duration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    transition: {
        type: StringConstructor;
        default: string;
    };
    style: {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default: {};
    };
    popClass: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeIconPosition: {
        type: StringConstructor;
        default: string;
    };
    closeIcon: {
        type: StringConstructor;
        default: string;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: (StringConstructor | {
            new (): Element;
            prototype: Element;
        })[];
        default: string;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleportDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    safeAreaInsetBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayClass: {
        type: StringConstructor;
        default: string;
    };
    overlayStyle: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
}, {
    slotDefault: boolean;
    isHighlight: (item: {
        [x: string]: string;
    }) => string;
    cancelActionSheet: () => void;
    chooseItem: (item: {
        disable: boolean;
        loading: boolean;
    }, index: any) => void;
    close: (e: Event) => void;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "close" | "choose" | "cancel")[], "update:visible" | "close" | "choose" | "cancel", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    cancelTxt?: unknown;
    optionTag?: unknown;
    optionSubTag?: unknown;
    chooseTagValue?: unknown;
    title?: unknown;
    color?: unknown;
    description?: unknown;
    menuItems?: unknown;
    isWrapTeleport?: unknown;
    closeAbled?: unknown;
    visible?: unknown;
    zIndex?: unknown;
    duration?: unknown;
    lockScroll?: unknown;
    closeOnClickOverlay?: unknown;
    position?: unknown;
    transition?: unknown;
    style?: unknown;
    popClass?: unknown;
    closeable?: unknown;
    closeIconPosition?: unknown;
    closeIcon?: unknown;
    destroyOnClose?: unknown;
    teleport?: unknown;
    overlay?: unknown;
    round?: unknown;
    teleportDisable?: unknown;
    safeAreaInsetBottom?: unknown;
    overlayClass?: unknown;
    overlayStyle?: unknown;
} & {
    title: string;
    style: import("vue").CSSProperties;
    color: string;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    zIndex: string | number;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    description: string;
    cancelTxt: string;
    optionTag: string;
    optionSubTag: string;
    chooseTagValue: string;
    menuItems: unknown[];
    isWrapTeleport: boolean;
    closeAbled: boolean;
} & {
    overlayStyle?: import("vue").CSSProperties | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onChoose?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    style: import("vue").CSSProperties;
    color: string;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    zIndex: string | number;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    description: string;
    cancelTxt: string;
    optionTag: string;
    optionSubTag: string;
    chooseTagValue: string;
    menuItems: unknown[];
    isWrapTeleport: boolean;
    closeAbled: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutActionSheet: typeof _sfc_main;
  }
}     
      