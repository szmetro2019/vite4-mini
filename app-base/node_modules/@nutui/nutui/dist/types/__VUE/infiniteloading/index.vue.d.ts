import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    hasMore: {
        type: BooleanConstructor;
        default: boolean;
    };
    threshold: {
        type: NumberConstructor;
        default: number;
    };
    pullIcon: {
        type: StringConstructor;
        default: string;
    };
    pullTxt: {
        type: StringConstructor;
        default: string;
    };
    loadIcon: {
        type: StringConstructor;
        default: string;
    };
    loadTxt: {
        type: StringConstructor;
        default: string;
    };
    loadMoreTxt: {
        type: StringConstructor;
        default: string;
    };
    useWindow: {
        type: BooleanConstructor;
        default: boolean;
    };
    containerId: {
        type: StringConstructor;
        default: string;
    };
    useCapture: {
        type: BooleanConstructor;
        default: boolean;
    };
    isOpenRefresh: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    touchStart: (event: TouchEvent) => void;
    touchMove: (event: TouchEvent) => void;
    touchEnd: () => void;
    getStyle: import("vue").ComputedRef<{
        height: string;
        transitionDuration: string | number;
    }>;
    translate: (keyPath: string, ...args: unknown[]) => string;
    slots: Readonly<{
        [name: string]: import("vue").Slot | undefined;
    }>;
    scrollEl: import("vue").Ref<Window | HTMLElement | (Node & ParentNode)>;
    scroller: import("vue").Ref<HTMLElement | null>;
    refreshTop: import("vue").Ref<HTMLElement | null>;
    beforeScrollTop: import("vue").Ref<number>;
    isTouching: import("vue").Ref<boolean>;
    isInfiniting: import("vue").Ref<boolean>;
    refreshMaxH: import("vue").Ref<number>;
    y: import("vue").Ref<number>;
    x: import("vue").Ref<number>;
    distance: import("vue").Ref<number>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll-change" | "load-more" | "refresh")[], "scroll-change" | "load-more" | "refresh", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    hasMore?: unknown;
    threshold?: unknown;
    pullIcon?: unknown;
    pullTxt?: unknown;
    loadIcon?: unknown;
    loadTxt?: unknown;
    loadMoreTxt?: unknown;
    useWindow?: unknown;
    containerId?: unknown;
    useCapture?: unknown;
    isOpenRefresh?: unknown;
} & {
    hasMore: boolean;
    threshold: number;
    pullIcon: string;
    pullTxt: string;
    loadIcon: string;
    loadTxt: string;
    loadMoreTxt: string;
    useWindow: boolean;
    containerId: string;
    useCapture: boolean;
    isOpenRefresh: boolean;
} & {}> & {
    "onScroll-change"?: ((...args: any[]) => any) | undefined;
    "onLoad-more"?: ((...args: any[]) => any) | undefined;
    onRefresh?: ((...args: any[]) => any) | undefined;
}, {
    hasMore: boolean;
    threshold: number;
    pullIcon: string;
    pullTxt: string;
    loadIcon: string;
    loadTxt: string;
    loadMoreTxt: string;
    useWindow: boolean;
    containerId: string;
    useCapture: boolean;
    isOpenRefresh: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutInfiniteLoading: typeof _sfc_main;
  }
}     
      