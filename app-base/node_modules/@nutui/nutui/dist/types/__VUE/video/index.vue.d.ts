import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    source: {
        type: ObjectConstructor;
        default: {};
    };
    options: {
        type: ObjectConstructor;
        default: {
            autoplay: boolean;
            volume: number;
            poster: string;
            loop: boolean;
            controls: boolean;
            muted: boolean;
            disabled: boolean;
            playsinline: boolean;
            touchPlay: boolean;
            preload: string;
        };
        required: true;
    };
    model: {
        type: StringConstructor;
        default: string;
    };
}, {
    handleError: () => void;
    isDisabled: import("vue").ComputedRef<any>;
    play: () => false | undefined;
    handleMuted: () => void;
    touchSlidSrart: () => void;
    touchSlidMove: (e: any) => void;
    touchSlidEnd: (e: any) => void;
    retry: () => void;
    fullScreen: () => void;
    translate: (keyPath: string, ...args: unknown[]) => string;
    videoElm: import("vue").Ref<null>;
    initial: import("vue").Ref<boolean>;
    showToolbox: import("vue").Ref<boolean>;
    player: import("vue").Ref<{
        $player: null;
        pos: null;
    }>;
    progressBar: import("vue").Ref<{
        progressElm: null;
        pos: null;
    }>;
    videoSet: import("vue").Ref<{
        loaded: number;
        displayTime: string;
        totalTime: string;
        progress: {
            width: number;
            current: number;
        };
    }>;
    state: import("vue").Ref<{
        controlShow: boolean;
        vol: number;
        currentTime: number;
        fullScreen: boolean;
        playing: boolean;
        isLoading: boolean;
        isEnd: boolean;
        isError: boolean;
        isMuted: boolean;
    }>;
    showTouchMask: import("vue").Ref<boolean>;
    onClick: import("vue").Ref<((...args: any[]) => any) | undefined>;
    source: import("vue").Ref<Record<string, any>>;
    options: import("vue").Ref<Record<string, any>>;
    onPause: import("vue").Ref<((...args: any[]) => any) | undefined>;
    onPlay: import("vue").Ref<((...args: any[]) => any) | undefined>;
    onTime: import("vue").Ref<((...args: any[]) => any) | undefined>;
    onPlayend: import("vue").Ref<((...args: any[]) => any) | undefined>;
    model: import("vue").Ref<string>;
    root: import("vue").Ref<null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "time" | "pause" | "play" | "playend")[], "click" | "time" | "pause" | "play" | "playend", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    source?: unknown;
    options?: unknown;
    model?: unknown;
} & {
    source: Record<string, any>;
    options: Record<string, any>;
    model: string;
} & {}> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onPause?: ((...args: any[]) => any) | undefined;
    onPlay?: ((...args: any[]) => any) | undefined;
    onTime?: ((...args: any[]) => any) | undefined;
    onPlayend?: ((...args: any[]) => any) | undefined;
}, {
    source: Record<string, any>;
    options: Record<string, any>;
    model: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutVideo: typeof _sfc_main;
  }
}     
      