import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    disable: {
        type: BooleanConstructor;
        default: boolean;
    };
    activeColor: {
        type: StringConstructor;
        default: string;
    };
    inactiveColor: {
        type: StringConstructor;
        default: string;
    };
    activeText: {
        type: StringConstructor;
        default: string;
    };
    inactiveText: {
        type: StringConstructor;
        default: string;
    };
    activeValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    inactiveValue: {
        type: (NumberConstructor | StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    loading: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    style: import("vue").ComputedRef<{
        backgroundColor: string;
    }>;
    onClick: (event: Event) => void;
    isActive: import("vue").ComputedRef<boolean>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "update:loading")[], "change" | "update:modelValue" | "update:loading", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    disable?: unknown;
    activeColor?: unknown;
    inactiveColor?: unknown;
    activeText?: unknown;
    inactiveText?: unknown;
    activeValue?: unknown;
    inactiveValue?: unknown;
    loading?: unknown;
    name?: unknown;
    size?: unknown;
    color?: unknown;
} & {
    name: string;
    size: string | number;
    color: string;
    loading: boolean;
    activeColor: string;
    activeText: string;
    modelValue: string | number | boolean;
    inactiveColor: string;
    disable: boolean;
    inactiveText: string;
    activeValue: string | number | boolean;
    inactiveValue: string | number | boolean;
} & {}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onUpdate:loading"?: ((...args: any[]) => any) | undefined;
}, {
    name: string;
    size: string | number;
    color: string;
    loading: boolean;
    activeColor: string;
    activeText: string;
    modelValue: string | number | boolean;
    inactiveColor: string;
    disable: boolean;
    inactiveText: string;
    activeValue: string | number | boolean;
    inactiveValue: string | number | boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutSwitch: typeof _sfc_main;
  }
}     
      