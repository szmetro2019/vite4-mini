import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: string;
    };
    desc: {
        type: StringConstructor;
        default: string;
    };
    tips: {
        type: StringConstructor;
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    errorMsg: {
        type: StringConstructor;
        default: string;
    };
    noButton: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    length: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    teleportDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    comLen: import("vue").ComputedRef<number>;
    sureClick: () => void;
    realInput: import("vue").Ref<string>;
    realpwd: import("vue").Ref<any>;
    focus: () => void;
    range: (val: number) => number;
    changeValue: (e: Event) => void;
    close: () => void;
    onTips: () => void;
    show: import("vue").Ref<boolean>;
    systemStyle: () => {
        paddingRight: string;
        opacity?: undefined;
        zindex?: undefined;
    } | {
        opacity: number;
        zindex: number;
        paddingRight?: undefined;
    } | undefined;
    closeIcon: () => void;
    translate: (keyPath: string, ...args: unknown[]) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "close" | "change" | "update:modelValue" | "complete" | "ok" | "tips" | "cancel")[], "update:visible" | "close" | "change" | "update:modelValue" | "complete" | "ok" | "tips" | "cancel", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
    desc?: unknown;
    tips?: unknown;
    visible?: unknown;
    modelValue?: unknown;
    errorMsg?: unknown;
    noButton?: unknown;
    closeOnClickOverlay?: unknown;
    length?: unknown;
    teleportDisable?: unknown;
} & {
    length: string | number;
    title: string;
    desc: string;
    visible: boolean;
    closeOnClickOverlay: boolean;
    teleportDisable: boolean;
    modelValue: string;
    tips: string;
    errorMsg: string;
    noButton: boolean;
} & {}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onComplete?: ((...args: any[]) => any) | undefined;
    onOk?: ((...args: any[]) => any) | undefined;
    onTips?: ((...args: any[]) => any) | undefined;
    onCancel?: ((...args: any[]) => any) | undefined;
}, {
    length: string | number;
    title: string;
    desc: string;
    visible: boolean;
    closeOnClickOverlay: boolean;
    teleportDisable: boolean;
    modelValue: string;
    tips: string;
    errorMsg: string;
    noButton: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutShortPassword: typeof _sfc_main;
  }
}     
      