import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    confirmText: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    customKey: {
        type: ArrayConstructor;
        default: () => never[];
    };
    value: {
        type: StringConstructor;
        default: string;
    };
    maxlength: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    randomKeys: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleportDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: (StringConstructor | {
            new (): Element;
            prototype: Element;
        })[];
        default: string;
    };
    popClass: {
        type: StringConstructor;
        default: string;
    };
}, {
    clickKeyIndex: Ref<string | number | undefined>;
    defaultKey: () => keys[];
    closeBoard: () => void;
    onTouchEnd: (event: TouchEvent) => void;
    onTouchMove: (event: TouchEvent) => void;
    onTouchstart: (item: {
        id: string | number;
        type: string;
    }, event: TouchEvent) => void;
    keysList: import("vue").ComputedRef<keys[]>;
    genCustomKeys: () => keys[];
    getBasicKeys: () => keys[];
    root: Ref<HTMLElement | undefined>;
    show: Ref<boolean>;
    translate: (keyPath: string, ...args: unknown[]) => string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("input" | "close" | "delete" | "update:value")[], "input" | "close" | "delete" | "update:value", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    confirmText?: unknown;
    title?: unknown;
    visible?: unknown;
    type?: unknown;
    customKey?: unknown;
    value?: unknown;
    maxlength?: unknown;
    randomKeys?: unknown;
    overlay?: unknown;
    teleportDisable?: unknown;
    teleport?: unknown;
    popClass?: unknown;
} & {
    type: string;
    title: string;
    overlay: boolean;
    visible: boolean;
    popClass: string;
    teleport: string | Element;
    teleportDisable: boolean;
    value: string;
    confirmText: string;
    customKey: unknown[];
    maxlength: string | number;
    randomKeys: boolean;
} & {}> & {
    onClose?: ((...args: any[]) => any) | undefined;
    onInput?: ((...args: any[]) => any) | undefined;
    onDelete?: ((...args: any[]) => any) | undefined;
    "onUpdate:value"?: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    title: string;
    overlay: boolean;
    visible: boolean;
    popClass: string;
    teleport: string | Element;
    teleportDisable: boolean;
    value: string;
    confirmText: string;
    customKey: unknown[];
    maxlength: string | number;
    randomKeys: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutNumberKeyboard: typeof _sfc_main;
  }
}     
      