import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    text: {
        type: StringConstructor;
    };
    icon: {
        type: StringConstructor;
    };
    iconSize: {
        type: (NumberConstructor | StringConstructor)[];
    };
    iconColor: {
        type: StringConstructor;
    };
    to: {
        type: (StringConstructor | ObjectConstructor)[];
    };
    url: {
        type: StringConstructor;
        default: string;
    };
    replace: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    rootClass: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    rootStyle: import("vue").ComputedRef<CSSProperties>;
    contentClass: import("vue").ComputedRef<{
        [x: string]: string | number | boolean | Record<string, any>;
    }>;
    iconProps: import("vue").ComputedRef<{
        name: string | undefined;
        size: string | number;
        color: string;
    }>;
    handleClick: (event: Event) => void;
} | undefined, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    text?: unknown;
    icon?: unknown;
    iconSize?: unknown;
    iconColor?: unknown;
    to?: unknown;
    url?: unknown;
    replace?: unknown;
} & {
    replace: boolean;
    url: string;
} & {
    to?: string | Record<string, any> | undefined;
    icon?: string | undefined;
    text?: string | undefined;
    iconSize?: string | number | undefined;
    iconColor?: string | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    replace: boolean;
    url: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutGridItem: typeof _sfc_main;
  }
}     
      