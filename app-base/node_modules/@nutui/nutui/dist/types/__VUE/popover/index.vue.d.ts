import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    list: {
        type: PropType<import("./type").PopoverList[]>;
        default: never[];
    };
    theme: {
        type: PropType<import("./type").PopoverTheme>;
        default: string;
    };
    location: {
        type: PropType<import("./type").PopoverLocation>;
        default: string;
    };
    offset: {
        type: ArrayConstructor;
        default: number[];
    };
    arrowOffset: {
        type: NumberConstructor;
        default: number;
    };
    customClass: {
        type: StringConstructor;
        default: string;
    };
    showArrow: {
        type: BooleanConstructor;
        default: boolean;
    };
    iconPrefix: {
        type: StringConstructor;
        default: string;
    };
    duration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayClass: {
        type: StringConstructor;
        default: string;
    };
    overlayStyle: {
        type: PropType<CSSProperties>;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickAction: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOutside: {
        type: BooleanConstructor;
        default: boolean;
    };
    targetId: {
        type: StringConstructor;
        default: string;
    };
    bgColor: {
        type: StringConstructor;
        default: string;
    };
}, {
    showPopup: import("vue").Ref<boolean>;
    openPopover: () => void;
    popoverArrow: import("vue").ComputedRef<string>;
    closePopover: () => void;
    chooseItem: (item: any, index: number) => void;
    popoverRef: import("vue").Ref<any>;
    popoverContentRef: import("vue").Ref<any>;
    getRootPosition: import("vue").ComputedRef<CSSProperties>;
    customStyle: import("vue").ComputedRef<CSSProperties>;
    popoverArrowStyle: import("vue").ComputedRef<CSSProperties>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "open" | "close" | "choose" | "update")[], "update:visible" | "open" | "close" | "choose" | "update", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    visible?: unknown;
    list?: unknown;
    theme?: unknown;
    location?: unknown;
    offset?: unknown;
    arrowOffset?: unknown;
    customClass?: unknown;
    showArrow?: unknown;
    iconPrefix?: unknown;
    duration?: unknown;
    overlay?: unknown;
    overlayClass?: unknown;
    overlayStyle?: unknown;
    closeOnClickOverlay?: unknown;
    closeOnClickAction?: unknown;
    closeOnClickOutside?: unknown;
    targetId?: unknown;
    bgColor?: unknown;
} & {
    overlay: boolean;
    visible: boolean;
    duration: string | number;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    theme: import("./type").PopoverTheme;
    offset: unknown[];
    list: import("./type").PopoverList[];
    customClass: string;
    bgColor: string;
    location: import("./type").PopoverLocation;
    arrowOffset: number;
    showArrow: boolean;
    iconPrefix: string;
    closeOnClickAction: boolean;
    closeOnClickOutside: boolean;
    targetId: string;
} & {
    overlayStyle?: CSSProperties | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onOpen?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    onChoose?: ((...args: any[]) => any) | undefined;
    onUpdate?: ((...args: any[]) => any) | undefined;
}, {
    overlay: boolean;
    visible: boolean;
    duration: string | number;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    theme: import("./type").PopoverTheme;
    offset: unknown[];
    list: import("./type").PopoverList[];
    customClass: string;
    bgColor: string;
    location: import("./type").PopoverLocation;
    arrowOffset: number;
    showArrow: boolean;
    iconPrefix: string;
    closeOnClickAction: boolean;
    closeOnClickOutside: boolean;
    targetId: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutPopover: typeof _sfc_main;
  }
}     
      