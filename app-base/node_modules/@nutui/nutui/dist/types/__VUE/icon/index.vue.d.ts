import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    name: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    classPrefix: {
        type: StringConstructor;
        default: string;
    };
    fontClassName: {
        type: StringConstructor;
        default: string;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    tag: {
        type: PropType<keyof HTMLElementTagNameMap>;
        default: string;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "click"[], "click", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    name?: unknown;
    size?: unknown;
    classPrefix?: unknown;
    fontClassName?: unknown;
    color?: unknown;
    tag?: unknown;
} & {
    name: string;
    size: string | number;
    classPrefix: string;
    fontClassName: string;
    color: string;
    tag: keyof HTMLElementTagNameMap;
} & {}> & {
    onClick?: ((...args: any[]) => any) | undefined;
}, {
    name: string;
    size: string | number;
    classPrefix: string;
    fontClassName: string;
    color: string;
    tag: keyof HTMLElementTagNameMap;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutIcon: typeof _sfc_main;
  }
}     
      