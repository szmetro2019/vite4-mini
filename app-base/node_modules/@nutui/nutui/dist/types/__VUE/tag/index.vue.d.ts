import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    color: {
        type: StringConstructor;
        default: string;
    };
    textColor: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: PropType<import("./type").TagType>;
        default: string;
    };
    plain: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    mark: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    classes: import("vue").ComputedRef<{
        [x: string]: boolean | import("./type").TagType;
    }>;
    getStyle: () => CSSProperties;
    onClose: (event: MouseEvent) => void;
    onClick: (event: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "close")[], "click" | "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    color?: unknown;
    textColor?: unknown;
    type?: unknown;
    plain?: unknown;
    round?: unknown;
    mark?: unknown;
    closeable?: unknown;
} & {
    type: import("./type").TagType;
    mark: boolean;
    color: string;
    round: boolean;
    plain: boolean;
    closeable: boolean;
    textColor: string;
} & {}> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
}, {
    type: import("./type").TagType;
    mark: boolean;
    color: string;
    round: boolean;
    plain: boolean;
    closeable: boolean;
    textColor: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutTag: typeof _sfc_main;
  }
}     
      