import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    range: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: BooleanConstructor;
    activeColor: StringConstructor;
    inactiveColor: StringConstructor;
    buttonColor: StringConstructor;
    vertical: {
        type: BooleanConstructor;
        default: boolean;
    };
    marks: {
        type: ObjectConstructor;
        default: {};
    };
    hiddenRange: {
        type: BooleanConstructor;
        default: boolean;
    };
    hiddenTag: {
        type: BooleanConstructor;
        default: boolean;
    };
    min: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    max: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    step: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    modelValue: {
        type: PropType<import("./type").SliderValue>;
        default: number;
    };
}, {
    barStyle: import("vue").ComputedRef<CSSProperties>;
    curValue: (idx?: number | undefined) => import("./type").SliderValue;
    buttonIndex: import("vue").Ref<number>;
    containerClasses: import("vue").ComputedRef<{
        [x: string]: boolean;
        "nut-range-container": boolean;
    }>;
    markClassName: (mark: number) => {
        [x: string]: boolean;
    };
    marksStyle: (mark: number) => CSSProperties;
    marksList: import("vue").ComputedRef<number[]>;
    tickStyle: (mark: number) => CSSProperties;
    disabled: import("vue").Ref<boolean>;
    vertical: import("vue").Ref<boolean>;
    range: import("vue").Ref<boolean>;
    onChange: import("vue").Ref<((...args: any[]) => any) | undefined>;
    activeColor: import("vue").Ref<string | undefined>;
    "onUpdate:modelValue": import("vue").Ref<((...args: any[]) => any) | undefined>;
    modelValue: import("vue").Ref<import("./type").SliderValue>;
    "onDrag-end": import("vue").Ref<((...args: any[]) => any) | undefined>;
    "onDrag-start": import("vue").Ref<((...args: any[]) => any) | undefined>;
    inactiveColor: import("vue").Ref<string | undefined>;
    buttonColor: import("vue").Ref<string | undefined>;
    marks: import("vue").Ref<Record<string, any>>;
    hiddenRange: import("vue").Ref<boolean>;
    hiddenTag: import("vue").Ref<boolean>;
    min: import("vue").Ref<string | number>;
    max: import("vue").Ref<string | number>;
    step: import("vue").Ref<string | number>;
    root: import("vue").Ref<HTMLElement | undefined>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
    wrapperStyle: import("vue").ComputedRef<{
        background: string | undefined;
    }>;
    buttonStyle: import("vue").ComputedRef<{
        borderColor: string | undefined;
    }>;
    onClick: (event: MouseEvent) => void;
    onTouchStart: (event: TouchEvent) => void;
    onTouchMove: (event: TouchEvent) => void;
    onTouchEnd: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "drag-end" | "drag-start")[], "change" | "update:modelValue" | "drag-end" | "drag-start", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    range?: unknown;
    disabled?: unknown;
    activeColor?: unknown;
    inactiveColor?: unknown;
    buttonColor?: unknown;
    vertical?: unknown;
    marks?: unknown;
    hiddenRange?: unknown;
    hiddenTag?: unknown;
    min?: unknown;
    max?: unknown;
    step?: unknown;
    modelValue?: unknown;
} & {
    disabled: boolean;
    vertical: boolean;
    range: boolean;
    modelValue: import("./type").SliderValue;
    marks: Record<string, any>;
    hiddenRange: boolean;
    hiddenTag: boolean;
    min: string | number;
    max: string | number;
    step: string | number;
} & {
    activeColor?: string | undefined;
    inactiveColor?: string | undefined;
    buttonColor?: string | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onDrag-end"?: ((...args: any[]) => any) | undefined;
    "onDrag-start"?: ((...args: any[]) => any) | undefined;
}, {
    disabled: boolean;
    vertical: boolean;
    range: boolean;
    modelValue: import("./type").SliderValue;
    marks: Record<string, any>;
    hiddenRange: boolean;
    hiddenTag: boolean;
    min: string | number;
    max: string | number;
    step: string | number;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutRange: typeof _sfc_main;
  }
}     
      