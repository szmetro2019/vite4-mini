import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
    direction: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: import("vue").PropType<import("./common").TabsSize>;
        default: string;
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    titleScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    ellipsis: {
        type: BooleanConstructor;
        default: boolean;
    };
    autoHeight: {
        type: BooleanConstructor;
        default: boolean;
    };
    background: {
        type: StringConstructor;
        default: string;
    };
    animatedTime: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    titleGutter: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    sticky: {
        type: BooleanConstructor;
        default: boolean;
    };
    top: {
        type: NumberConstructor;
        default: number;
    };
}, {
    tabChange: (item: import("./common").Title, index: number) => void;
    setTabItemRef: (el: HTMLElement, index: number) => void;
    navRef: import("vue").Ref<HTMLElement | undefined>;
    titles: import("vue").Ref<import("./common").Title[]>;
    contentStyle: import("vue").ComputedRef<{
        transform: string;
        transitionDuration: string;
    }>;
    tabsNavStyle: import("vue").ComputedRef<{
        background: any;
    }>;
    titleStyle: import("vue").ComputedRef<{
        marginLeft: string;
        marginRight: string;
    }>;
    tabsActiveStyle: import("vue").ComputedRef<{
        color: any;
        background: any;
    }>;
    container: import("vue").Ref<null>;
    getScrollY: import("vue").ComputedRef<boolean>;
    onStickyScroll: (params: {
        top: number;
        fixed: boolean;
    }) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, string[], string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    color?: unknown;
    direction?: unknown;
    size?: unknown;
    type?: unknown;
    titleScroll?: unknown;
    ellipsis?: unknown;
    autoHeight?: unknown;
    background?: unknown;
    animatedTime?: unknown;
    titleGutter?: unknown;
    sticky?: unknown;
    top?: unknown;
} & {
    type: string;
    size: import("./common").TabsSize;
    color: string;
    top: number;
    ellipsis: boolean;
    sticky: boolean;
    direction: string;
    modelValue: string | number;
    autoHeight: boolean;
    titleScroll: boolean;
    background: string;
    animatedTime: string | number;
    titleGutter: string | number;
} & {}> & {
    [x: string & `on${string}`]: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    size: import("./common").TabsSize;
    color: string;
    top: number;
    ellipsis: boolean;
    sticky: boolean;
    direction: string;
    modelValue: string | number;
    autoHeight: boolean;
    titleScroll: boolean;
    background: string;
    animatedTime: string | number;
    titleGutter: string | number;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutTabs: typeof _sfc_main;
  }
}     
      