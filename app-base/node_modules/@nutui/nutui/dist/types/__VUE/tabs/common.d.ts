import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
import { VNode, Ref } from 'vue';
export declare class Title {
    title: string;
    titleSlot?: VNode[];
    paneKey: string;
    disabled: boolean;
    constructor();
}
export declare type TabsSize = 'large' | 'normal' | 'small';
export declare const component: {
    props: {
        modelValue: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        color: {
            type: StringConstructor;
            default: string;
        };
        direction: {
            type: StringConstructor;
            default: string;
        };
        size: {
            type: import("vue").PropType<TabsSize>;
            default: string;
        };
        type: {
            type: StringConstructor;
            default: string;
        };
        titleScroll: {
            type: BooleanConstructor;
            default: boolean;
        };
        ellipsis: {
            type: BooleanConstructor;
            default: boolean;
        };
        autoHeight: {
            type: BooleanConstructor;
            default: boolean;
        };
        background: {
            type: StringConstructor;
            default: string;
        };
        animatedTime: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        titleGutter: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
        sticky: {
            type: BooleanConstructor;
            default: boolean;
        };
        top: {
            type: NumberConstructor;
            default: number;
        };
    };
    components: {};
    emits: string[];
    setup(props: any, { emit, slots }: any): {
        tabChange: (item: Title, index: number) => void;
        setTabItemRef: (el: HTMLElement, index: number) => void;
        navRef: Ref<HTMLElement | undefined>;
        titles: Ref<Title[]>;
        contentStyle: import("vue").ComputedRef<{
            transform: string;
            transitionDuration: string;
        }>;
        tabsNavStyle: import("vue").ComputedRef<{
            background: any;
        }>;
        titleStyle: import("vue").ComputedRef<{
            marginLeft: string;
            marginRight: string;
        }>;
        tabsActiveStyle: import("vue").ComputedRef<{
            color: any;
            background: any;
        }>;
        container: Ref<null>;
        getScrollY: import("vue").ComputedRef<boolean>;
        onStickyScroll: (params: {
            top: number;
            fixed: boolean;
        }) => void;
    };
};
