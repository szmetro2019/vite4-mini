import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    modelValue: {
        type: PropType<(string | number)[]>;
        default: () => never[];
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    cancelText: {
        type: StringConstructor;
        default: string;
    };
    okText: {
        type: StringConstructor;
        default: string;
    };
    columns: {
        type: PropType<(PickerOption | PickerOption[])[]>;
        default: () => never[];
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    threeDimensional: {
        type: BooleanConstructor;
        default: boolean;
    };
    swipeDuration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    showOkText: {
        type: BooleanConstructor;
        default: boolean;
    };
    showCancelText: {
        type: BooleanConstructor;
        default: boolean;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    duration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    transition: {
        type: StringConstructor;
        default: string;
    };
    style: {
        type: PropType<import("vue").CSSProperties>;
        default: {};
    };
    popClass: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeIconPosition: {
        type: StringConstructor;
        default: string;
    };
    closeIcon: {
        type: StringConstructor;
        default: string;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: (StringConstructor | {
            new (): Element;
            prototype: Element;
        })[];
        default: string;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleportDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    safeAreaInsetBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayClass: {
        type: StringConstructor;
        default: string;
    };
    overlayStyle: {
        type: PropType<import("vue").CSSProperties>;
    };
}, {
    column: import("vue").DefineComponent<{
        value: (NumberConstructor | StringConstructor)[];
        columnsType: StringConstructor;
        itemShow: {
            type: BooleanConstructor;
            default: boolean;
        };
        column: {
            type: PropType<import("./types").PickerOption[]>;
            default: () => never[];
        };
        readonly: {
            type: BooleanConstructor;
            default: boolean;
        };
        threeDimensional: {
            type: BooleanConstructor;
            default: boolean;
        };
        swipeDuration: {
            type: (NumberConstructor | StringConstructor)[];
            default: number;
        };
    }, {
        wrapper: import("vue").Ref<any>;
        setRollerStyle: (index: number) => string;
        isHidden: (index: number) => boolean;
        roller: import("vue").Ref<null>;
        onTouchStart: (event: TouchEvent) => void;
        onTouchMove: (event: TouchEvent) => void;
        onTouchEnd: (event: TouchEvent) => void;
        touchRollerStyle: import("vue").ComputedRef<{
            transition: string;
            transform: string;
        }>;
        touchTileStyle: import("vue").ComputedRef<{
            transition: string;
            transform: string;
        }>;
        setMove: (move: number, type?: string | undefined, time?: number | undefined) => void;
        stopMomentum: () => void;
        onClick: import("vue").Ref<((...args: any[]) => any) | undefined>;
        column: import("vue").Ref<import("./types").PickerOption[]>;
        onChange: import("vue").Ref<((...args: any[]) => any) | undefined>;
        readonly: import("vue").Ref<boolean>;
        value: import("vue").Ref<string | number | undefined>;
        columnsType: import("vue").Ref<string | undefined>;
        itemShow: import("vue").Ref<boolean>;
        threeDimensional: import("vue").Ref<boolean>;
        swipeDuration: import("vue").Ref<string | number>;
        touchParams: import("vue").Ref<{
            startY: number;
            endY: number;
            startTime: number;
            endTime: number;
            lastY: number;
            lastTime: number;
        }>;
        currIndex: import("vue").Ref<number>;
        transformY: import("vue").Ref<number>;
        scrollDistance: import("vue").Ref<number>;
        lineSpacing: import("vue").Ref<number>;
        rotation: import("vue").Ref<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "change")[], "click" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        value?: unknown;
        columnsType?: unknown;
        itemShow?: unknown;
        column?: unknown;
        readonly?: unknown;
        threeDimensional?: unknown;
        swipeDuration?: unknown;
    } & {
        column: import("./types").PickerOption[];
        readonly: boolean;
        itemShow: boolean;
        threeDimensional: boolean;
        swipeDuration: string | number;
    } & {
        value?: string | number | undefined;
        columnsType?: string | undefined;
    }> & {
        onClick?: ((...args: any[]) => any) | undefined;
        onChange?: ((...args: any[]) => any) | undefined;
    }, {
        column: import("./types").PickerOption[];
        readonly: boolean;
        itemShow: boolean;
        threeDimensional: boolean;
        swipeDuration: string | number;
    }>;
    columnsType: import("vue").ComputedRef<"multiple" | "single" | "cascade">;
    columnsList: import("vue").ComputedRef<PickerOption[][]>;
    close: () => void;
    changeHandler: (columnIndex: number, option: PickerOption) => void;
    confirmHandler: () => void;
    defaultValues: import("vue").Ref<(string | number)[]>;
    translate: (keyPath: string, ...args: unknown[]) => string;
    pickerColumn: import("vue").Ref<any[]>;
    swipeRef: (el: any) => void;
    show: import("vue").Ref<boolean>;
    formattedColumns: import("vue").Ref<({
        text: string | number;
        value: string | number;
        disabled?: string | undefined;
        children?: any[] | undefined;
        className?: string | number | undefined;
    } | {
        text: string | number;
        value: string | number;
        disabled?: string | undefined;
        children?: any[] | undefined;
        className?: string | number | undefined;
    }[])[]>;
    classes: import("vue").ComputedRef<{
        [x: string]: boolean;
    }>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "close" | "change" | "update:modelValue" | "confirm")[], "update:visible" | "close" | "change" | "update:modelValue" | "confirm", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    title?: unknown;
    cancelText?: unknown;
    okText?: unknown;
    columns?: unknown;
    readonly?: unknown;
    threeDimensional?: unknown;
    swipeDuration?: unknown;
    showOkText?: unknown;
    showCancelText?: unknown;
    visible?: unknown;
    zIndex?: unknown;
    duration?: unknown;
    lockScroll?: unknown;
    closeOnClickOverlay?: unknown;
    position?: unknown;
    transition?: unknown;
    style?: unknown;
    popClass?: unknown;
    closeable?: unknown;
    closeIconPosition?: unknown;
    closeIcon?: unknown;
    destroyOnClose?: unknown;
    teleport?: unknown;
    overlay?: unknown;
    round?: unknown;
    teleportDisable?: unknown;
    safeAreaInsetBottom?: unknown;
    overlayClass?: unknown;
    overlayStyle?: unknown;
} & {
    title: string;
    style: import("vue").CSSProperties;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    zIndex: string | number;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    modelValue: (string | number)[];
    readonly: boolean;
    threeDimensional: boolean;
    swipeDuration: string | number;
    cancelText: string;
    okText: string;
    columns: (PickerOption | PickerOption[])[];
    showOkText: boolean;
    showCancelText: boolean;
} & {
    overlayStyle?: import("vue").CSSProperties | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onConfirm?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    style: import("vue").CSSProperties;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    zIndex: string | number;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    modelValue: (string | number)[];
    readonly: boolean;
    threeDimensional: boolean;
    swipeDuration: string | number;
    cancelText: string;
    okText: string;
    columns: (PickerOption | PickerOption[])[];
    showOkText: boolean;
    showCancelText: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutPicker: typeof _sfc_main;
  }
}     
      