import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    value: (NumberConstructor | StringConstructor)[];
    columnsType: StringConstructor;
    itemShow: {
        type: BooleanConstructor;
        default: boolean;
    };
    column: {
        type: PropType<PickerOption[]>;
        default: () => never[];
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    threeDimensional: {
        type: BooleanConstructor;
        default: boolean;
    };
    swipeDuration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
}, {
    wrapper: import("vue").Ref<any>;
    setRollerStyle: (index: number) => string;
    isHidden: (index: number) => boolean;
    roller: import("vue").Ref<null>;
    onTouchStart: (event: TouchEvent) => void;
    onTouchMove: (event: TouchEvent) => void;
    onTouchEnd: (event: TouchEvent) => void;
    touchRollerStyle: import("vue").ComputedRef<{
        transition: string;
        transform: string;
    }>;
    touchTileStyle: import("vue").ComputedRef<{
        transition: string;
        transform: string;
    }>;
    setMove: (move: number, type?: string | undefined, time?: number | undefined) => void;
    stopMomentum: () => void;
    onClick: import("vue").Ref<((...args: any[]) => any) | undefined>;
    column: import("vue").Ref<PickerOption[]>;
    onChange: import("vue").Ref<((...args: any[]) => any) | undefined>;
    readonly: import("vue").Ref<boolean>;
    value: import("vue").Ref<string | number | undefined>;
    columnsType: import("vue").Ref<string | undefined>;
    itemShow: import("vue").Ref<boolean>;
    threeDimensional: import("vue").Ref<boolean>;
    swipeDuration: import("vue").Ref<string | number>;
    touchParams: import("vue").Ref<{
        startY: number;
        endY: number;
        startTime: number;
        endTime: number;
        lastY: number;
        lastTime: number;
    }>;
    currIndex: import("vue").Ref<number>;
    transformY: import("vue").Ref<number>;
    scrollDistance: import("vue").Ref<number>;
    lineSpacing: import("vue").Ref<number>;
    rotation: import("vue").Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("click" | "change")[], "click" | "change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value?: unknown;
    columnsType?: unknown;
    itemShow?: unknown;
    column?: unknown;
    readonly?: unknown;
    threeDimensional?: unknown;
    swipeDuration?: unknown;
} & {
    column: PickerOption[];
    readonly: boolean;
    itemShow: boolean;
    threeDimensional: boolean;
    swipeDuration: string | number;
} & {
    value?: string | number | undefined;
    columnsType?: string | undefined;
}> & {
    onClick?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
}, {
    column: PickerOption[];
    readonly: boolean;
    itemShow: boolean;
    threeDimensional: boolean;
    swipeDuration: string | number;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutPicker: typeof _sfc_main;
  }
}     
      