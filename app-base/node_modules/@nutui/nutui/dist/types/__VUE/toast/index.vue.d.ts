import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    id: StringConstructor;
    msg: StringConstructor;
    duration: {
        type: NumberConstructor;
        default: number;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    type: StringConstructor;
    customClass: StringConstructor;
    bottom: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    iconSize: {
        type: StringConstructor;
        default: string;
    };
    icon: StringConstructor;
    textAlignCenter: {
        type: BooleanConstructor;
        default: boolean;
    };
    loadingRotate: {
        type: BooleanConstructor;
        default: boolean;
    };
    bgColor: {
        type: StringConstructor;
        default: string;
    };
    onClose: FunctionConstructor;
    unmount: FunctionConstructor;
    cover: {
        type: BooleanConstructor;
        default: boolean;
    };
    coverColor: {
        type: StringConstructor;
        default: string;
    };
    title: {
        type: StringConstructor;
        default: string;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
}, {
    state: {
        mounted: boolean;
    };
    hide: () => void;
    clickCover: () => void;
    hasIcon: import("vue").ComputedRef<boolean>;
    toastBodyClass: import("vue").ComputedRef<any[]>;
    toastIconWrapperClass: import("vue").ComputedRef<(string | {
        'nut-toast-icon-no-animation': boolean;
    })[]>;
    onAfterLeave: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, "close"[], "close", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    id?: unknown;
    msg?: unknown;
    duration?: unknown;
    center?: unknown;
    type?: unknown;
    customClass?: unknown;
    bottom?: unknown;
    size?: unknown;
    iconSize?: unknown;
    icon?: unknown;
    textAlignCenter?: unknown;
    loadingRotate?: unknown;
    bgColor?: unknown;
    onClose?: unknown;
    unmount?: unknown;
    cover?: unknown;
    coverColor?: unknown;
    title?: unknown;
    closeOnClickOverlay?: unknown;
} & {
    title: string;
    center: boolean;
    size: string | number;
    bottom: string;
    duration: number;
    closeOnClickOverlay: boolean;
    cover: boolean;
    iconSize: string;
    textAlignCenter: boolean;
    loadingRotate: boolean;
    bgColor: string;
    coverColor: string;
} & {
    type?: string | undefined;
    icon?: string | undefined;
    onClose?: Function | undefined;
    id?: string | undefined;
    unmount?: Function | undefined;
    customClass?: string | undefined;
    msg?: string | undefined;
}> & {
    onClose?: ((...args: any[]) => any) | undefined;
}, {
    title: string;
    center: boolean;
    size: string | number;
    bottom: string;
    duration: number;
    closeOnClickOverlay: boolean;
    cover: boolean;
    iconSize: string;
    textAlignCenter: boolean;
    loadingRotate: boolean;
    bgColor: string;
    coverColor: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutToast: typeof _sfc_main;
  }
}     
      