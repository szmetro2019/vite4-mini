import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    visible: BooleanConstructor;
    modelValue: ArrayConstructor;
    options: {
        type: ArrayConstructor;
        default: () => never[];
    };
    lazy: BooleanConstructor;
    lazyLoad: FunctionConstructor;
    valueKey: {
        type: StringConstructor;
        default: string;
    };
    textKey: {
        type: StringConstructor;
        default: string;
    };
    childrenKey: {
        type: StringConstructor;
        default: string;
    };
    convertConfig: ObjectConstructor;
}, {
    handleNode(node: CascaderOption, silent?: boolean | undefined): Promise<void>;
    handleTabClick(tab: Tabs): void;
    formatTabTitle(pane: CascaderPane): string | undefined;
    isSelected(pane: CascaderPane, node: CascaderOption): boolean | null;
    panes: Ref<CascaderPane[]>;
    initLoading: Ref<boolean>;
    tabsCursor: Ref<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "pathChange")[], "change" | "update:modelValue" | "pathChange", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    visible?: unknown;
    modelValue?: unknown;
    options?: unknown;
    lazy?: unknown;
    lazyLoad?: unknown;
    valueKey?: unknown;
    textKey?: unknown;
    childrenKey?: unknown;
    convertConfig?: unknown;
} & {
    visible: boolean;
    options: unknown[];
    lazy: boolean;
    valueKey: string;
    textKey: string;
    childrenKey: string;
} & {
    modelValue?: unknown[] | undefined;
    lazyLoad?: Function | undefined;
    convertConfig?: Record<string, any> | undefined;
}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onPathChange?: ((...args: any[]) => any) | undefined;
}, {
    visible: boolean;
    options: unknown[];
    lazy: boolean;
    valueKey: string;
    textKey: string;
    childrenKey: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutCascader: typeof _sfc_main;
  }
}     
      