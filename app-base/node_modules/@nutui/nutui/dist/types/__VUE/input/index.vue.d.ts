import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    ref: {
        type: StringConstructor;
        default: string;
    };
    type: {
        type: PropType<string | undefined>;
        default: string;
    };
    modelValue: {
        type: StringConstructor;
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    labelClass: {
        type: StringConstructor;
        default: string;
    };
    labelWidth: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    labelAlign: {
        type: PropType<InputAlignType>;
        default: string;
    };
    colon: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAlign: {
        type: StringConstructor;
        default: string;
    };
    center: {
        type: BooleanConstructor;
        default: boolean;
    };
    required: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    error: {
        type: BooleanConstructor;
        default: boolean;
    };
    maxLength: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    leftIcon: {
        type: StringConstructor;
        default: string;
    };
    leftIconSize: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    rightIcon: {
        type: StringConstructor;
        default: string;
    };
    rightIconSize: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearIcon: {
        type: StringConstructor;
        default: string;
    };
    clearSize: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    border: {
        type: BooleanConstructor;
        default: boolean;
    };
    formatTrigger: {
        type: PropType<InputFormatTrigger>;
        default: string;
    };
    formatter: {
        type: PropType<(value: string) => string>;
        default: null;
    };
    rules: {
        type: PropType<InputRule>;
        default: never[];
    };
    errorMessage: {
        type: StringConstructor;
        default: string;
    };
    errorMessageAlign: {
        type: PropType<InputAlignType>;
        default: string;
    };
    rows: {
        type: (NumberConstructor | StringConstructor)[];
        default: null;
    };
    showWordLimit: {
        type: BooleanConstructor;
        default: boolean;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    confirmType: {
        type: PropType<import("./type").ConfirmTextType>;
        default: string;
    };
}, {
    renderInput: (type: InputType) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    inputRef: import("vue").Ref<any>;
    active: import("vue").Ref<boolean>;
    classes: ComputedRef<{
        [x: string]: boolean;
        center: boolean;
    }>;
    styles: ComputedRef<any>;
    stylesTextarea: ComputedRef<any>;
    inputType: (type: InputType) => string | undefined;
    onInput: (event: Event) => void;
    onFocus: (event: Event) => void;
    onBlur: (event: Event) => void;
    clear: (event: Event) => void;
    onClickInput: (event: MouseEvent) => void;
    onClickLeftIcon: (event: MouseEvent) => void;
    onClickRightIcon: (event: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "change" | "blur" | "focus" | "keypress" | "update:modelValue" | "click-input" | "click-left-icon" | "click-right-icon")[], "clear" | "change" | "blur" | "focus" | "keypress" | "update:modelValue" | "click-input" | "click-left-icon" | "click-right-icon", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    ref?: unknown;
    type?: unknown;
    modelValue?: unknown;
    placeholder?: unknown;
    label?: unknown;
    labelClass?: unknown;
    labelWidth?: unknown;
    labelAlign?: unknown;
    colon?: unknown;
    inputAlign?: unknown;
    center?: unknown;
    required?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    error?: unknown;
    maxLength?: unknown;
    leftIcon?: unknown;
    leftIconSize?: unknown;
    rightIcon?: unknown;
    rightIconSize?: unknown;
    clearable?: unknown;
    clearIcon?: unknown;
    clearSize?: unknown;
    border?: unknown;
    formatTrigger?: unknown;
    formatter?: unknown;
    rules?: unknown;
    errorMessage?: unknown;
    errorMessageAlign?: unknown;
    rows?: unknown;
    showWordLimit?: unknown;
    autofocus?: unknown;
    confirmType?: unknown;
} & {
    required: boolean;
    type: string | undefined;
    rightIcon: string;
    center: boolean;
    label: string;
    disabled: boolean;
    border: boolean;
    error: boolean;
    ref: string;
    placeholder: string;
    modelValue: string;
    maxLength: string | number;
    clearable: boolean;
    clearIcon: string;
    autofocus: boolean;
    readonly: boolean;
    inputAlign: string;
    formatter: (value: string) => string;
    labelClass: string;
    labelWidth: string | number;
    labelAlign: InputAlignType;
    colon: boolean;
    leftIcon: string;
    leftIconSize: string | number;
    rightIconSize: string | number;
    clearSize: string | number;
    formatTrigger: InputFormatTrigger;
    rules: InputRule;
    errorMessage: string;
    errorMessageAlign: InputAlignType;
    rows: string | number;
    showWordLimit: boolean;
    confirmType: import("./type").ConfirmTextType;
} & {}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    "onClick-input"?: ((...args: any[]) => any) | undefined;
    "onClick-left-icon"?: ((...args: any[]) => any) | undefined;
    "onClick-right-icon"?: ((...args: any[]) => any) | undefined;
    onKeypress?: ((...args: any[]) => any) | undefined;
}, {
    required: boolean;
    type: string | undefined;
    rightIcon: string;
    center: boolean;
    label: string;
    disabled: boolean;
    border: boolean;
    error: boolean;
    ref: string;
    placeholder: string;
    modelValue: string;
    maxLength: string | number;
    clearable: boolean;
    clearIcon: string;
    autofocus: boolean;
    readonly: boolean;
    inputAlign: string;
    formatter: (value: string) => string;
    labelClass: string;
    labelWidth: string | number;
    labelAlign: InputAlignType;
    colon: boolean;
    leftIcon: string;
    leftIconSize: string | number;
    rightIconSize: string | number;
    clearSize: string | number;
    formatTrigger: InputFormatTrigger;
    rules: InputRule;
    errorMessage: string;
    errorMessageAlign: InputAlignType;
    rows: string | number;
    showWordLimit: boolean;
    confirmType: import("./type").ConfirmTextType;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutInput: typeof _sfc_main;
  }
}     
      