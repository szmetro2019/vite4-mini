import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    modelValue: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    inputType: {
        type: StringConstructor;
        default: string;
    };
    label: {
        type: StringConstructor;
        default: string;
    };
    maxLength: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    placeholder: {
        type: StringConstructor;
        default: string;
    };
    clearable: {
        type: BooleanConstructor;
        default: boolean;
    };
    clearIcon: {
        type: StringConstructor;
        default: string;
    };
    background: {
        type: StringConstructor;
        default: string;
    };
    inputBackground: {
        type: StringConstructor;
        default: string;
    };
    focusStyle: {
        type: ObjectConstructor;
        default: () => void;
    };
    autofocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    readonly: {
        type: BooleanConstructor;
        default: boolean;
    };
    inputAlign: {
        type: StringConstructor;
        default: string;
    };
}, {
    valueChange: (event: Event) => void;
    valueFocus: (event: Event) => void;
    valueBlur: (event: Event) => void;
    handleClear: (event: Event) => void;
    handleSubmit: () => void;
    searchbarStyle: import("vue").ComputedRef<{
        background: string;
    }>;
    inputSearchbarStyle: import("vue").ComputedRef<{
        background: string;
    }>;
    focusCss: Ref<{}>;
    translate: (keyPath: string, ...args: unknown[]) => string;
    clickInput: (event: Event) => void;
    leftIconClick: (event: Event) => void;
    rightIconClick: (event: Event) => void;
    styleSearchbar: import("vue").ComputedRef<CSSProperties>;
    active: Ref<boolean>;
    inputsearch: Ref<HTMLElement | null>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("clear" | "change" | "blur" | "focus" | "update:modelValue" | "search" | "click-input" | "click-left-icon" | "click-right-icon")[], "search" | "clear" | "change" | "blur" | "focus" | "update:modelValue" | "click-input" | "click-left-icon" | "click-right-icon", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    inputType?: unknown;
    label?: unknown;
    maxLength?: unknown;
    placeholder?: unknown;
    clearable?: unknown;
    clearIcon?: unknown;
    background?: unknown;
    inputBackground?: unknown;
    focusStyle?: unknown;
    autofocus?: unknown;
    disabled?: unknown;
    readonly?: unknown;
    inputAlign?: unknown;
} & {
    label: string;
    disabled: boolean;
    placeholder: string;
    modelValue: string | number;
    background: string;
    inputType: string;
    maxLength: string | number;
    clearable: boolean;
    clearIcon: string;
    inputBackground: string;
    focusStyle: Record<string, any>;
    autofocus: boolean;
    readonly: boolean;
    inputAlign: string;
} & {}> & {
    onChange?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onClear?: ((...args: any[]) => any) | undefined;
    onBlur?: ((...args: any[]) => any) | undefined;
    onFocus?: ((...args: any[]) => any) | undefined;
    onSearch?: ((...args: any[]) => any) | undefined;
    "onClick-input"?: ((...args: any[]) => any) | undefined;
    "onClick-left-icon"?: ((...args: any[]) => any) | undefined;
    "onClick-right-icon"?: ((...args: any[]) => any) | undefined;
}, {
    label: string;
    disabled: boolean;
    placeholder: string;
    modelValue: string | number;
    background: string;
    inputType: string;
    maxLength: string | number;
    clearable: boolean;
    clearIcon: string;
    inputBackground: string;
    focusStyle: Record<string, any>;
    autofocus: boolean;
    readonly: boolean;
    inputAlign: string;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutSearchBar: typeof _sfc_main;
  }
}     
      