import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    modelValue: {
        type: ArrayConstructor;
        default: () => never[];
    };
    type: {
        type: StringConstructor;
        default: string;
    };
    customAddressTitle: {
        type: StringConstructor;
        default: string;
    };
    province: {
        type: ArrayConstructor;
        default: () => never[];
    };
    city: {
        type: ArrayConstructor;
        default: () => never[];
    };
    country: {
        type: ArrayConstructor;
        default: () => never[];
    };
    town: {
        type: ArrayConstructor;
        default: () => never[];
    };
    isShowCustomAddress: {
        type: BooleanConstructor;
        default: boolean;
    };
    existAddress: {
        type: ArrayConstructor;
        default: () => never[];
    };
    existAddressTitle: {
        type: StringConstructor;
        default: string;
    };
    customAndExistTitle: {
        type: StringConstructor;
        default: string;
    };
    defaultIcon: {
        type: StringConstructor;
        default: string;
    };
    selectedIcon: {
        type: StringConstructor;
        default: string;
    };
    closeBtnIcon: {
        type: StringConstructor;
        default: string;
    };
    backBtnIcon: {
        type: StringConstructor;
        default: string;
    };
    height: {
        type: (NumberConstructor | StringConstructor)[];
        default: string;
    };
    columnsPlaceholder: {
        type: (StringConstructor | ArrayConstructor)[];
        default: string;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    zIndex: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    duration: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
    };
    lockScroll: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeOnClickOverlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    transition: {
        type: StringConstructor;
        default: string;
    };
    style: {
        type: import("vue").PropType<import("vue").CSSProperties>;
        default: {};
    };
    popClass: {
        type: StringConstructor;
        default: string;
    };
    closeable: {
        type: BooleanConstructor;
        default: boolean;
    };
    closeIconPosition: {
        type: StringConstructor;
        default: string;
    };
    closeIcon: {
        type: StringConstructor;
        default: string;
    };
    destroyOnClose: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: (StringConstructor | {
            new (): Element;
            prototype: Element;
        })[];
        default: string;
    };
    overlay: {
        type: BooleanConstructor;
        default: boolean;
    };
    round: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleportDisable: {
        type: BooleanConstructor;
        default: boolean;
    };
    safeAreaInsetBottom: {
        type: BooleanConstructor;
        default: boolean;
    };
    overlayClass: {
        type: StringConstructor;
        default: string;
    };
    overlayStyle: {
        type: import("vue").PropType<import("vue").CSSProperties>;
    };
}, {
    translate: (keyPath: string, ...args: unknown[]) => string;
    regionList: import("vue").ComputedRef<any>;
    transformData: (data: RegionData[]) => CustomRegionData[];
    renderIcon: (n: string) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    showPopup: any;
    privateType: any;
    tabIndex: Ref<number>;
    tabName: Ref<string[]>;
    selectedRegion: Ref<{
        [x: string]: any;
        name: string;
        id: number | string;
    }[]>;
    switchModule: () => void;
    closeWay: Ref<string>;
    close: () => void;
    getTabName: (item: RegionData | null, index: number) => any;
    nextAreaList: (item: RegionData) => void;
    regionLine: Ref<HTMLElement | null>;
    tabRegion: Ref<any>;
    lineDistance: Ref<number>;
    changeRegionTab: (item: RegionData, index: number) => void;
    selectedExist: (item: RegionData) => void;
    clickOverlay: () => void;
    handClose: (type?: string) => void;
    handleElevatorItem: (key: string, item: RegionData) => void;
    initCustomSelected: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("update:visible" | "close" | "change" | "selected" | "update:modelValue" | "type" | "close-mask" | "switch-module")[], "type" | "update:visible" | "close" | "change" | "selected" | "update:modelValue" | "close-mask" | "switch-module", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    type?: unknown;
    customAddressTitle?: unknown;
    province?: unknown;
    city?: unknown;
    country?: unknown;
    town?: unknown;
    isShowCustomAddress?: unknown;
    existAddress?: unknown;
    existAddressTitle?: unknown;
    customAndExistTitle?: unknown;
    defaultIcon?: unknown;
    selectedIcon?: unknown;
    closeBtnIcon?: unknown;
    backBtnIcon?: unknown;
    height?: unknown;
    columnsPlaceholder?: unknown;
    visible?: unknown;
    zIndex?: unknown;
    duration?: unknown;
    lockScroll?: unknown;
    closeOnClickOverlay?: unknown;
    position?: unknown;
    transition?: unknown;
    style?: unknown;
    popClass?: unknown;
    closeable?: unknown;
    closeIconPosition?: unknown;
    closeIcon?: unknown;
    destroyOnClose?: unknown;
    teleport?: unknown;
    overlay?: unknown;
    round?: unknown;
    teleportDisable?: unknown;
    safeAreaInsetBottom?: unknown;
    overlayClass?: unknown;
    overlayStyle?: unknown;
} & {
    type: string;
    style: import("vue").CSSProperties;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    zIndex: string | number;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    height: string | number;
    modelValue: unknown[];
    customAddressTitle: string;
    province: unknown[];
    city: unknown[];
    country: unknown[];
    town: unknown[];
    isShowCustomAddress: boolean;
    existAddress: unknown[];
    existAddressTitle: string;
    customAndExistTitle: string;
    defaultIcon: string;
    selectedIcon: string;
    closeBtnIcon: string;
    backBtnIcon: string;
    columnsPlaceholder: string | unknown[];
} & {
    overlayStyle?: import("vue").CSSProperties | undefined;
}> & {
    "onUpdate:visible"?: ((...args: any[]) => any) | undefined;
    onChange?: ((...args: any[]) => any) | undefined;
    onClose?: ((...args: any[]) => any) | undefined;
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    onSelected?: ((...args: any[]) => any) | undefined;
    onType?: ((...args: any[]) => any) | undefined;
    "onClose-mask"?: ((...args: any[]) => any) | undefined;
    "onSwitch-module"?: ((...args: any[]) => any) | undefined;
}, {
    type: string;
    style: import("vue").CSSProperties;
    round: boolean;
    overlay: boolean;
    visible: boolean;
    zIndex: string | number;
    duration: string | number;
    lockScroll: boolean;
    overlayClass: string;
    closeOnClickOverlay: boolean;
    position: string;
    transition: string;
    popClass: string;
    closeable: boolean;
    closeIconPosition: string;
    closeIcon: string;
    destroyOnClose: boolean;
    teleport: string | Element;
    teleportDisable: boolean;
    safeAreaInsetBottom: boolean;
    height: string | number;
    modelValue: unknown[];
    customAddressTitle: string;
    province: unknown[];
    city: unknown[];
    country: unknown[];
    town: unknown[];
    isShowCustomAddress: boolean;
    existAddress: unknown[];
    existAddressTitle: string;
    customAndExistTitle: string;
    defaultIcon: string;
    selectedIcon: string;
    closeBtnIcon: string;
    backBtnIcon: string;
    columnsPlaceholder: string | unknown[];
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutAddress: typeof _sfc_main;
  }
}     
      