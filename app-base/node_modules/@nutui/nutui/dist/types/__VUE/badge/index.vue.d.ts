import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    value: {
        type: (NumberConstructor | StringConstructor)[];
    };
    max: {
        type: NumberConstructor;
        default: number;
    };
    dot: {
        type: BooleanConstructor;
        default: boolean;
    };
    bubble: {
        type: BooleanConstructor;
        default: boolean;
    };
    hidden: {
        type: BooleanConstructor;
        default: boolean;
    };
    top: {
        type: StringConstructor;
        default: string;
    };
    right: {
        type: StringConstructor;
        default: string;
    };
    zIndex: {
        type: NumberConstructor;
        default: number;
    };
    color: {
        type: StringConstructor;
        default: string;
    };
}, {
    state: {};
    stl: import("vue").ComputedRef<{
        top: string;
        right: string;
        zIndex: number;
        background: string;
    }>;
    content: import("vue").ComputedRef<string | number | undefined>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    value?: unknown;
    max?: unknown;
    dot?: unknown;
    bubble?: unknown;
    hidden?: unknown;
    top?: unknown;
    right?: unknown;
    zIndex?: unknown;
    color?: unknown;
} & {
    right: string;
    color: string;
    top: string;
    zIndex: number;
    hidden: boolean;
    dot: boolean;
    max: number;
    bubble: boolean;
} & {
    value?: string | number | undefined;
}>, {
    right: string;
    color: string;
    top: string;
    zIndex: number;
    hidden: boolean;
    dot: boolean;
    max: number;
    bubble: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutBadge: typeof _sfc_main;
  }
}     
      