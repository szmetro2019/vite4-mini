import { App, PropType, CSSProperties } from 'vue';
declare type Install<T> = T & {
  install(app: App): void;
};
declare const _sfc_main: Install< import("vue").DefineComponent<{
    title: {
        type: StringConstructor;
        default: string;
    };
    subTitle: {
        type: StringConstructor;
        default: string;
    };
    disabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    name: {
        type: (NumberConstructor | StringConstructor)[];
        default: number;
        required: true;
    };
    collapseRef: {
        type: ObjectConstructor;
    };
}, {
    wrapperRef: any;
    contentRef: any;
    open: () => void;
    toggleOpen: () => void;
    changeOpen: (bol: boolean) => void;
    animation: () => void;
    titleIcon: any;
    titleIconSize: any;
    titleIconColor: any;
    titleIconPosition: any;
    icon: any;
    iconSize: any;
    iconColor: any;
    openExpanded: import("vue").Ref<boolean>;
    iconStyle: import("vue").Ref<{
        transform: string;
    }>;
    classes: import("vue").ComputedRef<{
        [x: string]: any;
    }>;
    emptyContent: import("vue").ComputedRef<string>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    title?: unknown;
    subTitle?: unknown;
    disabled?: unknown;
    name?: unknown;
    collapseRef?: unknown;
} & {
    name: string | number;
    title: string;
    subTitle: string;
    disabled: boolean;
} & {
    collapseRef?: Record<string, any> | undefined;
}>, {
    name: string | number;
    title: string;
    subTitle: string;
    disabled: boolean;
}>>;
export default _sfc_main;

declare module 'vue' {
  interface GlobalComponents {
      NutCollapseItem: typeof _sfc_main;
  }
}     
      