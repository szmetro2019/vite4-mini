/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { inject, reactive, ref, useSlots, toRefs, resolveComponent, openBlock, createElementBlock, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, renderSlot } from "vue";
import { c as createComponent } from "./component.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "../locale/lang";
const { componentName, create, translate } = createComponent("audio-operate");
const _sfc_main = create({
  props: {
    type: {
      type: String,
      default: () => "play"
    }
  },
  components: {},
  emits: ["click"],
  setup(props, { emit }) {
    const audio = inject("audioParent");
    const parent = reactive(audio);
    const customSlot = ref(useSlots().default);
    return { ...toRefs(props), ...toRefs(parent), customSlot, translate };
  }
});
const _hoisted_1 = { class: "nut-audio-operate" };
const _hoisted_2 = /* @__PURE__ */ createTextVNode("\u5FEB\u8FDB");
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_button = resolveComponent("nut-button");
  return openBlock(), createElementBlock("div", _hoisted_1, [
    _ctx.type == "back" ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: "nut-audio-operate-item",
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.fastBack && _ctx.fastBack(...args))
    }, [
      !_ctx.customSlot ? (openBlock(), createBlock(_component_nut_button, {
        key: 0,
        type: "primary",
        size: "small"
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString(_ctx.translate("back")), 1)
        ]),
        _: 1
      })) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "default")
    ])) : createCommentVNode("", true),
    _ctx.type == "play" ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: "nut-audio-operate-item",
      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.changeStatus && _ctx.changeStatus(...args))
    }, [
      !_ctx.customSlot ? (openBlock(), createBlock(_component_nut_button, {
        key: 0,
        type: "primary",
        size: "small"
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString(!_ctx.audioData.playing ? `${_ctx.translate("start")}` : `${_ctx.translate("pause")}`), 1)
        ]),
        _: 1
      })) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "default")
    ])) : createCommentVNode("", true),
    _ctx.type == "forward" ? (openBlock(), createElementBlock("div", {
      key: 2,
      class: "nut-audio-operate-item",
      onClick: _cache[2] || (_cache[2] = (...args) => _ctx.forward && _ctx.forward(...args))
    }, [
      !_ctx.customSlot ? (openBlock(), createBlock(_component_nut_button, {
        key: 0,
        type: "primary",
        size: "small"
      }, {
        default: withCtx(() => [
          _hoisted_2
        ]),
        _: 1
      })) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "default")
    ])) : createCommentVNode("", true),
    _ctx.type == "mute" ? (openBlock(), createElementBlock("div", {
      key: 3,
      class: "nut-audio-operate-item",
      onClick: _cache[3] || (_cache[3] = (...args) => _ctx.handleMute && _ctx.handleMute(...args))
    }, [
      !_ctx.customSlot ? (openBlock(), createBlock(_component_nut_button, {
        key: 0,
        type: !_ctx.audioData.hanMuted ? "primary" : "default",
        size: "small"
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString(_ctx.translate("mute")), 1)
        ]),
        _: 1
      }, 8, ["type"])) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "default")
    ])) : createCommentVNode("", true)
  ]);
}
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index as default };
