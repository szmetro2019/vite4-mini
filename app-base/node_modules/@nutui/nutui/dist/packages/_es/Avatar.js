/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { toRefs, inject, ref, reactive, onMounted, computed, resolveComponent, openBlock, createElementBlock, normalizeStyle, normalizeClass, Fragment, createBlock, mergeProps, createCommentVNode, renderSlot, toDisplayString } from "vue";
import { c as createComponent } from "./component.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "../locale/lang";
const { componentName, create } = createComponent("avatar");
const _sfc_main = create({
  props: {
    size: {
      type: String,
      default: ""
    },
    shape: {
      type: String,
      default: "round"
    },
    bgColor: {
      type: String,
      default: "#eee"
    },
    color: {
      type: String,
      default: "#666"
    },
    url: {
      type: String,
      default: ""
    },
    alt: {
      type: String,
      default: ""
    },
    icon: {
      type: String,
      default: ""
    }
  },
  emits: ["active-avatar", "onError"],
  setup(props, { emit, slots }) {
    const { size, shape, bgColor, color, icon } = toRefs(props);
    const sizeValue = ["large", "normal", "small"];
    const avatarGroup = inject("avatarGroup", null);
    const avatarRef = ref(null);
    const visible = reactive({
      lightTheme: false
    });
    const state = reactive({
      index: 1,
      showMax: false,
      maxIndex: 0
    });
    onMounted(() => {
      var _a, _b;
      const children = (_b = (_a = avatarGroup == null ? void 0 : avatarGroup.avatarGroupRef) == null ? void 0 : _a.value) == null ? void 0 : _b.children;
      if (children) {
        avatarLength(children);
      }
    });
    const classes = computed(() => {
      var _a, _b;
      const prefixCls = componentName;
      return {
        [prefixCls]: true,
        [`nut-avatar-${size.value || ((_a = avatarGroup == null ? void 0 : avatarGroup.props) == null ? void 0 : _a.size) || "normal"}`]: true,
        [`nut-avatar-${shape.value || ((_b = avatarGroup == null ? void 0 : avatarGroup.props) == null ? void 0 : _b.shape) || "normal"}`]: true
      };
    });
    const styles = computed(() => {
      var _a, _b, _c;
      return {
        width: sizeValue.indexOf(size.value) > -1 ? "" : `${size.value}px`,
        height: sizeValue.indexOf(size.value) > -1 ? "" : `${size.value}px`,
        backgroundColor: `${bgColor.value}`,
        color: `${color.value}`,
        marginLeft: state.index != 1 && (((_a = avatarGroup == null ? void 0 : avatarGroup.props) == null ? void 0 : _a.span) ? `${(_b = avatarGroup == null ? void 0 : avatarGroup.props) == null ? void 0 : _b.span}px` : ""),
        zIndex: ((_c = avatarGroup == null ? void 0 : avatarGroup.props) == null ? void 0 : _c.zIndex) == "right" ? `${Math.abs(state.maxIndex - state.index)}` : ""
      };
    });
    const maxStyles = computed(() => {
      var _a, _b;
      return {
        backgroundColor: `${(_a = avatarGroup == null ? void 0 : avatarGroup.props) == null ? void 0 : _a.maxBgColor}`,
        color: `${(_b = avatarGroup == null ? void 0 : avatarGroup.props) == null ? void 0 : _b.maxColor}`
      };
    });
    const iconStyles = computed(() => {
      return !!icon.value ? icon.value : "";
    });
    const isShowText = computed(() => {
      return slots.default;
    });
    const avatarLength = (children) => {
      var _a, _b, _c;
      state.maxIndex = children.length;
      for (let i = 0; i < children.length; i++) {
        if (children[i] && children[i].classList && children[i].classList[0] == "nut-avatar") {
          children[i].setAttribute("data-index", i + 1);
        }
      }
      state.index = (_b = (_a = avatarRef == null ? void 0 : avatarRef.value) == null ? void 0 : _a.dataset) == null ? void 0 : _b.index;
      if (state.index == state.maxIndex && state.index != ((_c = avatarGroup == null ? void 0 : avatarGroup.props) == null ? void 0 : _c.maxCount)) {
        state.showMax = true;
      }
    };
    const activeAvatar = (event) => {
      emit("active-avatar", event);
    };
    const onError = (event) => {
      emit("onError", event);
    };
    return {
      classes,
      styles,
      iconStyles,
      isShowText,
      maxStyles,
      activeAvatar,
      onError,
      avatarGroup,
      visible,
      avatarRef,
      ...toRefs(state)
    };
  }
});
const _hoisted_1 = ["src", "alt"];
const _hoisted_2 = {
  key: 2,
  class: "text"
};
const _hoisted_3 = {
  key: 1,
  class: "text"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
  const _component_nut_icon = resolveComponent("nut-icon");
  return _ctx.showMax || !((_b = (_a = _ctx.avatarGroup) == null ? void 0 : _a.props) == null ? void 0 : _b.maxCount) || _ctx.index <= ((_d = (_c = _ctx.avatarGroup) == null ? void 0 : _c.props) == null ? void 0 : _d.maxCount) ? (openBlock(), createElementBlock("view", {
    key: 0,
    style: normalizeStyle(!_ctx.showMax ? _ctx.styles : _ctx.maxStyles),
    class: normalizeClass(_ctx.classes),
    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.activeAvatar && _ctx.activeAvatar(...args)),
    ref: "avatarRef"
  }, [
    !((_f = (_e = _ctx.avatarGroup) == null ? void 0 : _e.props) == null ? void 0 : _f.maxCount) || _ctx.index <= ((_h = (_g = _ctx.avatarGroup) == null ? void 0 : _g.props) == null ? void 0 : _h.maxCount) ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
      _ctx.url ? (openBlock(), createElementBlock("img", {
        key: 0,
        src: _ctx.url,
        alt: _ctx.alt,
        onError: _cache[0] || (_cache[0] = (...args) => _ctx.onError && _ctx.onError(...args))
      }, null, 40, _hoisted_1)) : _ctx.icon ? (openBlock(), createBlock(_component_nut_icon, mergeProps({ key: 1 }, _ctx.$attrs, {
        class: "icon",
        name: _ctx.iconStyles
      }), null, 16, ["name"])) : createCommentVNode("", true),
      _ctx.isShowText ? (openBlock(), createElementBlock("view", _hoisted_2, [
        renderSlot(_ctx.$slots, "default")
      ])) : createCommentVNode("", true)
    ], 64)) : createCommentVNode("", true),
    _ctx.showMax ? (openBlock(), createElementBlock("view", _hoisted_3, toDisplayString(((_j = (_i = _ctx.avatarGroup) == null ? void 0 : _i.props) == null ? void 0 : _j.maxContent) ? (_l = (_k = _ctx.avatarGroup) == null ? void 0 : _k.props) == null ? void 0 : _l.maxContent : `+ ${_ctx.maxIndex - ((_n = (_m = _ctx.avatarGroup) == null ? void 0 : _m.props) == null ? void 0 : _n.maxCount)}`), 1)) : createCommentVNode("", true)
  ], 6)) : createCommentVNode("", true);
}
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index as default };
