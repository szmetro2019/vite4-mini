/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { c as createComponent } from "./component.js";
import { ref, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, normalizeStyle, createVNode, createBlock, createCommentVNode } from "vue";
import { p as pxCheck } from "./pxCheck.js";
import { u as useTouch } from "./index4.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "../locale/lang";
const { componentName } = createComponent("rate");
const useComponent = (touchable = true) => {
  return {
    props: {
      count: {
        type: [String, Number],
        default: 5
      },
      modelValue: {
        type: [String, Number],
        default: 0
      },
      iconSize: {
        type: [String, Number],
        default: 18
      },
      activeColor: {
        type: String,
        default: ""
      },
      voidColor: {
        type: String,
        default: ""
      },
      uncheckedIcon: {
        type: String,
        default: "star-n"
      },
      checkedIcon: {
        type: String,
        default: "star-fill-n"
      },
      readonly: {
        type: Boolean,
        default: false
      },
      disabled: {
        type: Boolean,
        default: false
      },
      allowHalf: {
        type: Boolean,
        default: false
      },
      touchable: {
        type: Boolean,
        default: true
      },
      spacing: {
        type: [String, Number],
        default: 14
      },
      classPrefix: {
        type: String,
        default: "nut-icon"
      },
      fontClassName: {
        type: String,
        default: "nutui-iconfont"
      }
    },
    emits: ["update:modelValue", "change"],
    setup(props, { emit }) {
      const rateRefs = ref([]);
      const classes = computed(() => {
        const prefixCls = componentName;
        return {
          [prefixCls]: true
        };
      });
      const updateVal = (value) => {
        emit("update:modelValue", value);
        emit("change", value);
      };
      const onClick = (e, index2) => {
        if (props.disabled || props.readonly)
          return;
        let value = 0;
        if (index2 === 1 && props.modelValue === index2)
          ;
        else {
          value = index2;
          if (props.allowHalf && e == 2) {
            value -= 0.5;
          }
        }
        updateVal(value);
      };
      const getScoreByPosition = (x, rateRefs2, allowHalf) => {
        let v = 0;
        for (let index2 = rateRefs2.value.length - 1; index2 >= 0; index2--) {
          const item = rateRefs2.value[index2];
          if (x > item.offsetLeft) {
            if (allowHalf) {
              v = index2 + (x > item.offsetLeft + item.clientWidth / 2 ? 1 : 0.5);
            } else {
              v = index2 + 1;
            }
            break;
          }
        }
        return v;
      };
      const touch = useTouch();
      const touchMethods = {
        onTouchStart(event) {
          if (!props.touchable || props.readonly)
            return;
          touch.start(event);
        },
        onTouchMove(event) {
          if (!props.touchable || !touchable)
            return;
          touch.move(event);
          if (touch.isHorizontal()) {
            if (rateRefs.value) {
              event.preventDefault();
              updateVal(getScoreByPosition(touch.moveX.value, rateRefs, props.allowHalf));
            }
          }
        }
      };
      const refRandomId = Math.random().toString(36).slice(-8);
      return {
        classes,
        ...touchMethods,
        onClick,
        pxCheck,
        rateRefs,
        refRandomId
      };
    }
  };
};
const component = useComponent();
const _hoisted_1 = ["id"];
function render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_icon = resolveComponent("nut-icon");
  return openBlock(), createElementBlock("view", {
    class: normalizeClass(_ctx.classes),
    onTouchstart: _cache[0] || (_cache[0] = (...args) => _ctx.onTouchStart && _ctx.onTouchStart(...args)),
    onTouchmove: _cache[1] || (_cache[1] = (...args) => _ctx.onTouchMove && _ctx.onTouchMove(...args))
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(Number(_ctx.count), (n) => {
      return openBlock(), createElementBlock("view", {
        class: "nut-rate-item",
        key: n,
        ref: "rateRefs",
        id: "rateRefs-" + _ctx.refRandomId + n,
        style: normalizeStyle({ marginRight: _ctx.pxCheck(_ctx.spacing) })
      }, [
        createVNode(_component_nut_icon, {
          size: _ctx.iconSize,
          class: normalizeClass(["nut-rate-item__icon", { "nut-rate-item__icon--disabled": _ctx.disabled || n > _ctx.modelValue }]),
          onClick: ($event) => _ctx.onClick(1, n),
          color: n <= _ctx.modelValue ? _ctx.activeColor : _ctx.voidColor,
          "font-class-name": _ctx.fontClassName,
          "class-prefix": _ctx.classPrefix,
          name: n <= _ctx.modelValue ? _ctx.checkedIcon : _ctx.uncheckedIcon
        }, null, 8, ["size", "onClick", "class", "color", "font-class-name", "class-prefix", "name"]),
        _ctx.allowHalf && Number(_ctx.modelValue) + 1 > n ? (openBlock(), createBlock(_component_nut_icon, {
          key: 0,
          class: "nut-rate-item__icon nut-rate-item__icon--half",
          onClick: ($event) => _ctx.onClick(2, n),
          "font-class-name": _ctx.fontClassName,
          "class-prefix": _ctx.classPrefix,
          color: n <= Number(_ctx.modelValue) + 1 ? _ctx.activeColor : _ctx.voidColor,
          size: _ctx.iconSize,
          name: _ctx.checkedIcon
        }, null, 8, ["onClick", "font-class-name", "class-prefix", "color", "size", "name"])) : _ctx.allowHalf && Number(_ctx.modelValue) + 1 < n ? (openBlock(), createBlock(_component_nut_icon, {
          key: 1,
          class: "nut-rate-item__icon nut-rate-item__icon--disabled nut-rate-item__icon--half",
          onClick: ($event) => _ctx.onClick(2, n),
          "font-class-name": _ctx.fontClassName,
          "class-prefix": _ctx.classPrefix,
          color: _ctx.voidColor,
          size: _ctx.iconSize,
          name: _ctx.uncheckedIcon
        }, null, 8, ["onClick", "font-class-name", "class-prefix", "color", "size", "name"])) : createCommentVNode("", true)
      ], 12, _hoisted_1);
    }), 128))
  ], 34);
}
const { create } = createComponent("rate");
const _sfc_main = create(component);
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", render]]);
export { index as default };
