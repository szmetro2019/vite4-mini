/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { ref, onMounted, watch, computed, resolveComponent, openBlock, createBlock, normalizeStyle, withCtx, createElementVNode, normalizeClass, createElementBlock, renderSlot, Fragment, createTextVNode, toDisplayString, createCommentVNode, resolveDynamicComponent, h } from "vue";
import { c as createComponent } from "./component.js";
import { f as funInterceptor } from "./interceptor.js";
import { p as popupProps } from "./props.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import Popup from "./Popup.js";
import _sfc_main$1 from "./Icon.js";
import Button from "./Button.js";
import OverLay from "./OverLay.js";
import "../locale/lang";
import { C as CreateComponent } from "./mountComponent.js";
import "./pxCheck.js";
const { componentName, create, translate } = createComponent("dialog");
const _sfc_main = create({
  inheritAttrs: false,
  components: {},
  props: {
    ...popupProps,
    closeOnClickOverlay: {
      type: Boolean,
      default: true
    },
    title: {
      type: String,
      default: ""
    },
    content: {
      type: [String, Object],
      default: ""
    },
    noFooter: {
      type: Boolean,
      default: false
    },
    noOkBtn: {
      type: Boolean,
      default: false
    },
    noCancelBtn: {
      type: Boolean,
      default: false
    },
    cancelText: {
      type: String,
      default: ""
    },
    okText: {
      type: String,
      default: ""
    },
    cancelAutoClose: {
      type: Boolean,
      default: true
    },
    textAlign: {
      type: String,
      default: "center"
    },
    closeOnPopstate: {
      type: Boolean,
      default: false
    },
    footerDirection: {
      type: String,
      default: "horizontal"
    },
    customClass: {
      type: String,
      default: ""
    },
    popStyle: {
      type: Object
    },
    beforeClose: Function
  },
  emits: ["update", "update:visible", "ok", "cancel", "opened", "closed"],
  setup(props, { emit }) {
    const showPopup = ref(props.visible);
    onMounted(() => {
      if (props.closeOnPopstate) {
        window.addEventListener("popstate", function() {
          closed("page");
        });
      }
    });
    watch(
      () => props.visible,
      (value) => {
        showPopup.value = value;
        if (value) {
          emit("opened");
        }
      }
    );
    const classes = computed(() => {
      return {
        [componentName]: true,
        [props.customClass]: true
      };
    });
    const update = (val) => {
      emit("update", val);
      emit("update:visible", val);
    };
    const closed = (action) => {
      funInterceptor(props.beforeClose, {
        args: [action],
        done: () => {
          update(false);
          emit("closed");
        }
      });
    };
    const onCancel = () => {
      emit("cancel");
      if (props.cancelAutoClose) {
        closed("cancel");
      }
    };
    const onOk = () => {
      emit("ok");
      closed("ok");
    };
    const onClickOverlay = () => {
      if (props.closeOnClickOverlay) {
        closed("");
      }
    };
    return {
      closed,
      classes,
      onCancel,
      onOk,
      showPopup,
      onClickOverlay,
      translate
    };
  }
});
const _hoisted_1 = {
  key: 0,
  class: "nut-dialog__header"
};
const _hoisted_2 = ["innerHTML"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_button = resolveComponent("nut-button");
  const _component_nut_popup = resolveComponent("nut-popup");
  return openBlock(), createBlock(_component_nut_popup, {
    teleport: _ctx.teleport,
    visible: _ctx.showPopup,
    "onUpdate:visible": _cache[0] || (_cache[0] = ($event) => _ctx.showPopup = $event),
    "close-on-click-overlay": false,
    "lock-scroll": _ctx.lockScroll,
    "pop-class": _ctx.popClass,
    style: normalizeStyle(_ctx.popStyle),
    "overlay-class": _ctx.overlayClass,
    "overlay-style": _ctx.overlayStyle,
    round: "",
    onClickOverlay: _ctx.onClickOverlay,
    onClickCloseIcon: _ctx.closed
  }, {
    default: withCtx(() => [
      createElementVNode("view", {
        class: normalizeClass(_ctx.classes)
      }, [
        _ctx.$slots.header || _ctx.title ? (openBlock(), createElementBlock("view", _hoisted_1, [
          _ctx.$slots.header ? renderSlot(_ctx.$slots, "header", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(_ctx.title), 1)
          ], 64))
        ])) : createCommentVNode("", true),
        createElementVNode("view", {
          class: "nut-dialog__content",
          style: normalizeStyle({ textAlign: _ctx.textAlign })
        }, [
          _ctx.$slots.default ? renderSlot(_ctx.$slots, "default", { key: 0 }) : typeof _ctx.content === "string" ? (openBlock(), createElementBlock("view", {
            key: 1,
            innerHTML: _ctx.content
          }, null, 8, _hoisted_2)) : (openBlock(), createBlock(resolveDynamicComponent(_ctx.content), { key: 2 }))
        ], 4),
        !_ctx.noFooter ? (openBlock(), createElementBlock("view", {
          key: 1,
          class: normalizeClass(["nut-dialog__footer", { [_ctx.footerDirection]: _ctx.footerDirection }])
        }, [
          _ctx.$slots.footer ? renderSlot(_ctx.$slots, "footer", { key: 0 }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            !_ctx.noCancelBtn ? (openBlock(), createBlock(_component_nut_button, {
              key: 0,
              size: "small",
              plain: "",
              type: "primary",
              class: "nut-dialog__footer-cancel",
              onClick: _ctx.onCancel
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.cancelText || _ctx.translate("cancel")), 1)
              ]),
              _: 1
            }, 8, ["onClick"])) : createCommentVNode("", true),
            !_ctx.noOkBtn ? (openBlock(), createBlock(_component_nut_button, {
              key: 1,
              size: "small",
              type: "primary",
              class: "nut-dialog__footer-ok",
              onClick: _ctx.onOk
            }, {
              default: withCtx(() => [
                createTextVNode(toDisplayString(_ctx.okText || _ctx.translate("confirm")), 1)
              ]),
              _: 1
            }, 8, ["onClick"])) : createCommentVNode("", true)
          ], 64))
        ], 2)) : createCommentVNode("", true)
      ], 2)
    ]),
    _: 3
  }, 8, ["teleport", "visible", "lock-scroll", "pop-class", "style", "overlay-class", "overlay-style", "onClickOverlay", "onClickCloseIcon"]);
}
var Dialog = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
class DialogOptions {
  constructor() {
    this.title = "";
    this.content = "";
    this.cancelText = "";
    this.okText = "";
    this.textAlign = "center";
    this.customClass = "";
    this.overlayStyle = {};
    this.overlayClass = "";
    this.popStyle = {};
    this.popClass = "";
    this.teleport = "body";
    this.id = new Date().getTime();
    this.footerDirection = "horizontal";
    this.onUpdate = (value) => {
    };
    this.onOk = () => {
    };
    this.onCancel = () => {
    };
    this.onOpened = () => {
    };
    this.onClosed = () => {
    };
    this.visible = true;
    this.noFooter = false;
    this.noOkBtn = false;
    this.noCancelBtn = false;
    this.okBtnDisabled = false;
    this.closeOnPopstate = false;
    this.closeOnClickOverlay = true;
    this.lockScroll = true;
  }
}
class DialogFunction {
  constructor(_options) {
    this.options = new DialogOptions();
    let options = Object.assign(this.options, _options);
    const { unmount } = CreateComponent(options, {
      name: "dialog",
      components: [Popup, _sfc_main$1, Button, OverLay],
      wrapper: (elWarp, root) => {
        return {
          setup() {
            options.onUpdate = (val) => {
              if (val == false) {
                unmount();
              }
            };
            if (options == null ? void 0 : options.onOpened) {
              options == null ? void 0 : options.onOpened();
            }
            options.teleport = `#${root.id}`;
            return () => {
              return h(Dialog, options);
            };
          }
        };
      }
    });
  }
}
const _Dialog = function(options) {
  return new DialogFunction(options);
};
_Dialog.install = (app) => {
  app.use(Dialog);
  app.config.globalProperties.$dialog = _Dialog;
};
export { Dialog, DialogOptions, _Dialog as default };
