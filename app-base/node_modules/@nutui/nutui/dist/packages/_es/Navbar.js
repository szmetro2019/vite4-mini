/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { toRefs, ref, computed, onMounted, nextTick, resolveComponent, openBlock, createElementBlock, createElementVNode, normalizeClass, normalizeStyle, createBlock, createCommentVNode, toDisplayString, renderSlot, mergeProps } from "vue";
import { c as createComponent } from "./component.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "../locale/lang";
const { componentName, create } = createComponent("navbar");
const _sfc_main = create({
  props: {
    leftShow: { type: Boolean, default: false },
    title: { type: String, default: "" },
    titIcon: { type: String, default: "" },
    leftText: { type: String, default: "" },
    desc: { type: String, default: "" },
    fixed: {
      type: Boolean,
      default: false
    },
    safeAreaInsetTop: {
      type: Boolean,
      default: false
    },
    border: {
      type: Boolean,
      default: false
    },
    placeholder: {
      type: Boolean,
      default: true
    },
    zIndex: {
      type: [Number, String],
      default: 10
    }
  },
  emits: ["on-click-back", "on-click-title", "on-click-icon", "on-click-right"],
  setup(props, { emit }) {
    const { border, fixed, safeAreaInsetTop, placeholder, zIndex } = toRefs(props);
    const navBarWrap = ref(null);
    const navBarHtml = ref(null);
    let navHeight = ref(0);
    const classes = computed(() => {
      const prefixCls = componentName;
      return {
        [prefixCls]: true,
        [`${prefixCls}--border`]: border.value,
        [`${prefixCls}--fixed`]: fixed.value,
        [`${prefixCls}--safe-area-inset-top`]: safeAreaInsetTop.value
      };
    });
    const styles = computed(() => {
      return {
        zIndex: zIndex.value
      };
    });
    onMounted(() => {
      if (fixed.value && placeholder.value) {
        nextTick(() => {
          var _a;
          navHeight = (_a = navBarHtml == null ? void 0 : navBarHtml.value) == null ? void 0 : _a.getBoundingClientRect().height;
          navBarWrap.value.style.height = navHeight + "px";
        });
      }
    });
    function handleLeft() {
      emit("on-click-back");
    }
    function handleCenter() {
      emit("on-click-title");
    }
    function handleCenterIcon() {
      emit("on-click-icon");
    }
    function handleRight() {
      emit("on-click-right");
    }
    return {
      navBarWrap,
      navBarHtml,
      classes,
      styles,
      handleLeft,
      handleCenter,
      handleCenterIcon,
      handleRight
    };
  }
});
const _hoisted_1 = {
  key: 0,
  class: "nut-navbar--placeholder",
  ref: "navBarWrap"
};
const _hoisted_2 = {
  key: 1,
  class: "nut-navbar__text"
};
const _hoisted_3 = { class: "nut-navbar__title" };
const _hoisted_4 = {
  key: 0,
  class: "nut-navbar__text"
};
const _hoisted_5 = {
  key: 1,
  class: "nut-navbar__text"
};
const _hoisted_6 = { class: "nut-navbar__title" };
const _hoisted_7 = {
  key: 0,
  class: "nut-navbar__text"
};
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_icon = resolveComponent("nut-icon");
  return _ctx.fixed && _ctx.placeholder ? (openBlock(), createElementBlock("view", _hoisted_1, [
    createElementVNode("view", {
      class: normalizeClass(_ctx.classes),
      style: normalizeStyle(_ctx.styles),
      ref: "navBarHtml"
    }, [
      createElementVNode("view", {
        class: "nut-navbar__left",
        onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleLeft && _ctx.handleLeft(...args))
      }, [
        _ctx.leftShow ? (openBlock(), createBlock(_component_nut_icon, {
          key: 0,
          color: "#979797",
          name: "left"
        })) : createCommentVNode("", true),
        _ctx.leftText ? (openBlock(), createElementBlock("view", _hoisted_2, toDisplayString(_ctx.leftText), 1)) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "left")
      ]),
      createElementVNode("view", _hoisted_3, [
        _ctx.title ? (openBlock(), createElementBlock("view", {
          key: 0,
          class: "title",
          onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleCenter && _ctx.handleCenter(...args))
        }, toDisplayString(_ctx.title), 1)) : createCommentVNode("", true),
        _ctx.titIcon ? (openBlock(), createBlock(_component_nut_icon, mergeProps({
          key: 1,
          class: "icon"
        }, _ctx.$attrs, {
          name: _ctx.titIcon,
          onClick: _ctx.handleCenterIcon
        }), null, 16, ["name", "onClick"])) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "content")
      ]),
      createElementVNode("view", {
        class: "nut-navbar__right",
        onClick: _cache[2] || (_cache[2] = (...args) => _ctx.handleRight && _ctx.handleRight(...args))
      }, [
        _ctx.desc ? (openBlock(), createElementBlock("view", _hoisted_4, toDisplayString(_ctx.desc), 1)) : createCommentVNode("", true),
        renderSlot(_ctx.$slots, "right")
      ])
    ], 6)
  ], 512)) : (openBlock(), createElementBlock("view", {
    key: 1,
    class: normalizeClass(_ctx.classes),
    style: normalizeStyle(_ctx.styles)
  }, [
    createElementVNode("view", {
      class: "nut-navbar__left",
      onClick: _cache[3] || (_cache[3] = (...args) => _ctx.handleLeft && _ctx.handleLeft(...args))
    }, [
      _ctx.leftShow ? (openBlock(), createBlock(_component_nut_icon, {
        key: 0,
        color: "#979797",
        name: "left"
      })) : createCommentVNode("", true),
      _ctx.leftText ? (openBlock(), createElementBlock("view", _hoisted_5, toDisplayString(_ctx.leftText), 1)) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "left")
    ]),
    createElementVNode("view", _hoisted_6, [
      _ctx.title ? (openBlock(), createElementBlock("view", {
        key: 0,
        class: "title",
        onClick: _cache[4] || (_cache[4] = (...args) => _ctx.handleCenter && _ctx.handleCenter(...args))
      }, toDisplayString(_ctx.title), 1)) : createCommentVNode("", true),
      _ctx.titIcon ? (openBlock(), createBlock(_component_nut_icon, mergeProps({
        key: 1,
        class: "icon"
      }, _ctx.$attrs, {
        name: _ctx.titIcon,
        onClick: _ctx.handleCenterIcon
      }), null, 16, ["name", "onClick"])) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "content")
    ]),
    createElementVNode("view", {
      class: "nut-navbar__right",
      onClick: _cache[5] || (_cache[5] = (...args) => _ctx.handleRight && _ctx.handleRight(...args))
    }, [
      _ctx.desc ? (openBlock(), createElementBlock("view", _hoisted_7, toDisplayString(_ctx.desc), 1)) : createCommentVNode("", true),
      renderSlot(_ctx.$slots, "right")
    ])
  ], 6));
}
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index as default };
