/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { c as createComponent } from "./component.js";
import { inject, reactive, getCurrentInstance, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, normalizeStyle, createElementVNode, Fragment, toDisplayString, createCommentVNode, renderSlot, createVNode } from "vue";
import { u as useRouter } from "./index.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "../locale/lang";
const { create } = createComponent("tabbar-item");
const _sfc_main = create({
  props: {
    tabTitle: {
      type: String,
      default: ""
    },
    name: {
      type: String
    },
    icon: {
      type: String,
      default: ""
    },
    href: {
      type: String,
      default: ""
    },
    num: {
      type: [Number, String],
      default: ""
    },
    activeImg: {
      type: String,
      default: ""
    },
    img: {
      type: String,
      default: ""
    },
    classPrefix: {
      type: String,
      default: "nut-icon"
    },
    dot: {
      type: Boolean,
      default: false
    },
    fontClassName: {
      type: String,
      default: "nutui-iconfont"
    },
    to: [Object, String]
  },
  setup(props, { emit, slots }) {
    const isHaveSlot = (slot) => {
      return slots[slot];
    };
    const parent = inject("parent");
    const state = reactive({
      size: parent.size,
      unactiveColor: parent.unactiveColor,
      activeColor: parent.activeColor,
      index: 0
    });
    const router = useRouter();
    const relation = (child) => {
      var _a;
      if (child.proxy) {
        parent.children.push(child.proxy);
        const index2 = parent.children.indexOf(child.proxy);
        state.index = (_a = props.name) != null ? _a : index2;
      }
    };
    relation(getCurrentInstance());
    const active = computed(() => state.index === parent.modelValue);
    function change() {
      var _a, _b, _c;
      let key = (_a = props.name) != null ? _a : state.index;
      let indexValue = null;
      if (props.name) {
        indexValue = parent.children.findIndex((item) => {
          return item.name == key;
        });
      }
      parent.changeIndex(indexValue != null ? indexValue : key, state.index);
      let index2 = indexValue != null ? indexValue : key;
      if ((_b = parent.children[index2]) == null ? void 0 : _b.href) {
        window.location.href = parent.children[index2].href;
        return;
      }
      if ((_c = parent.children[index2]) == null ? void 0 : _c.to) {
        let to = parent.children[index2].to;
        if (to && router) {
          router.push(to);
        } else {
          location.replace(to);
        }
      }
    }
    return {
      state,
      active,
      isHaveSlot,
      change
    };
  }
});
const _hoisted_1 = { class: "nut-tabbar-item_icon-box" };
const _hoisted_2 = {
  key: 0,
  class: "nut-tabbar-item_icon-box_tips nut-tabbar-item_icon-box_num"
};
const _hoisted_3 = {
  key: 1,
  class: "nut-tabbar-item_icon-box_tips nut-tabbar-item_icon-box_nums"
};
const _hoisted_4 = {
  key: 1,
  class: "nut-tabbar-item_icon-box_dot"
};
const _hoisted_5 = {
  key: 2,
  class: "nut-tabbar-item_icon-box_icon"
};
const _hoisted_6 = { key: 3 };
const _hoisted_7 = { key: 0 };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_icon = resolveComponent("nut-icon");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(["nut-tabbar-item", { "nut-tabbar-item__icon--unactive": !_ctx.active }]),
    style: normalizeStyle({
      color: _ctx.active ? _ctx.state.activeColor : _ctx.state.unactiveColor
    }),
    onClick: _cache[0] || (_cache[0] = ($event) => _ctx.change())
  }, [
    createElementVNode("view", _hoisted_1, [
      !_ctx.dot ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
        _ctx.num && _ctx.num <= 99 ? (openBlock(), createElementBlock("view", _hoisted_2, toDisplayString(_ctx.num), 1)) : _ctx.num && _ctx.num >= 100 ? (openBlock(), createElementBlock("view", _hoisted_3, toDisplayString("99+"))) : createCommentVNode("", true)
      ], 64)) : createCommentVNode("", true),
      _ctx.dot ? (openBlock(), createElementBlock("div", _hoisted_4)) : createCommentVNode("", true),
      _ctx.$slots.icon ? (openBlock(), createElementBlock("div", _hoisted_5, [
        renderSlot(_ctx.$slots, "icon", { active: _ctx.active })
      ])) : _ctx.icon ? (openBlock(), createElementBlock("view", _hoisted_6, [
        createVNode(_component_nut_icon, {
          class: "nut-tabbar-item_icon-box_icon",
          size: _ctx.state.size,
          name: _ctx.icon,
          "font-class-name": _ctx.fontClassName,
          "class-prefix": _ctx.classPrefix
        }, null, 8, ["size", "name", "font-class-name", "class-prefix"])
      ])) : _ctx.activeImg ? (openBlock(), createElementBlock("div", {
        key: 4,
        class: "nut-tabbar-item_icon-box_icon",
        style: normalizeStyle({
          backgroundImage: `url(${_ctx.active ? _ctx.activeImg : _ctx.img})`,
          width: _ctx.state.size,
          height: _ctx.state.size
        })
      }, null, 4)) : createCommentVNode("", true),
      createElementVNode("view", {
        class: normalizeClass([
          "nut-tabbar-item_icon-box_nav-word",
          { "nut-tabbar-item_icon-box_big-word": !_ctx.icon && !_ctx.activeImg && !_ctx.$slots.icon }
        ])
      }, [
        renderSlot(_ctx.$slots, "default", {}, () => [
          _ctx.tabTitle ? (openBlock(), createElementBlock("view", _hoisted_7, toDisplayString(_ctx.tabTitle), 1)) : createCommentVNode("", true)
        ])
      ], 2)
    ])
  ], 6);
}
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index as default };
