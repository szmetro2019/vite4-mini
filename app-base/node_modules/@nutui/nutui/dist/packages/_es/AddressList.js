/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { resolveComponent, openBlock, createElementBlock, createElementVNode, renderSlot, toDisplayString, createCommentVNode, createVNode, createTextVNode, ref, h, createBlock, resolveDynamicComponent, withCtx, reactive, computed, watch, onMounted, normalizeClass, Fragment, renderList, createSlots } from "vue";
import { c as createComponent, n as floatData } from "./component.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "../locale/lang";
const { create: create$2 } = createComponent("addresslist-item");
const { translate: translate$1 } = createComponent("addresslist");
const _sfc_main$2 = create$2({
  props: {
    item: {
      type: Object,
      default: {}
    }
  },
  emits: ["delIcon", "editIcon", "itemClick"],
  setup(props, { emit }) {
    const delClick = (event) => {
      emit("delIcon", event, props.item);
      event.stopPropagation();
    };
    const editClick = (event) => {
      emit("editIcon", event, props.item);
      event.stopPropagation();
    };
    const contentsClick = (event) => {
      emit("itemClick", event, props.item);
      event.stopPropagation();
    };
    return {
      delClick,
      editClick,
      contentsClick,
      translate: translate$1
    };
  }
});
const _hoisted_1$1 = { class: "nut-addresslist-item__info" };
const _hoisted_2$1 = { class: "nut-addresslist-item__info-contact" };
const _hoisted_3$1 = { class: "nut-addresslist-item__info-contact-name" };
const _hoisted_4$1 = { class: "nut-addresslist-item__info-contact-tel" };
const _hoisted_5$1 = {
  key: 0,
  class: "nut-addresslist-item__info-contact-default"
};
const _hoisted_6$1 = { class: "nut-addresslist-item__info-handle" };
const _hoisted_7$1 = { class: "nut-addresslist-item__addr" };
function _sfc_render$2(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_icon = resolveComponent("nut-icon");
  return openBlock(), createElementBlock("div", {
    class: "nut-addresslist-item",
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.contentsClick && _ctx.contentsClick(...args))
  }, [
    createElementVNode("div", _hoisted_1$1, [
      createElementVNode("div", _hoisted_2$1, [
        renderSlot(_ctx.$slots, "contentTop", {}, () => [
          createElementVNode("div", _hoisted_3$1, toDisplayString(_ctx.item.addressName), 1),
          createElementVNode("div", _hoisted_4$1, toDisplayString(_ctx.item.phone), 1),
          _ctx.item.defaultAddress ? (openBlock(), createElementBlock("div", _hoisted_5$1, toDisplayString(_ctx.translate("default")), 1)) : createCommentVNode("", true)
        ])
      ]),
      createElementVNode("div", _hoisted_6$1, [
        renderSlot(_ctx.$slots, "contentIcon", {}, () => [
          createVNode(_component_nut_icon, {
            name: "del",
            class: "nut-addresslist-item__info-handle-del",
            onClick: _ctx.delClick
          }, null, 8, ["onClick"]),
          createVNode(_component_nut_icon, {
            name: "edit",
            class: "nut-addresslist-item__info-handle-edit",
            onClick: _ctx.editClick
          }, null, 8, ["onClick"])
        ])
      ])
    ]),
    createElementVNode("div", _hoisted_7$1, [
      renderSlot(_ctx.$slots, "contentAddr", {}, () => [
        createTextVNode(toDisplayString(_ctx.item.fullAddress), 1)
      ])
    ])
  ]);
}
var ItemContents = /* @__PURE__ */ _export_sfc(_sfc_main$2, [["render", _sfc_render$2]]);
const { create: create$1 } = createComponent("addresslist-general");
const _sfc_main$1 = create$1({
  props: {
    item: {
      type: Object,
      default: {}
    },
    longPress: {
      type: Boolean,
      default: false
    },
    swipeEdition: {
      type: Boolean,
      default: false
    }
  },
  emits: ["delIcon", "editIcon", "itemClick", "longDown", "longCopy", "longSet", "longDel", "swipeDel"],
  components: {
    ItemContents
  },
  setup(props, { emit }) {
    const renderCompontent = () => {
      return h(ItemContents, {
        item: props.item,
        onDelIcon(event) {
          delClick(event);
        },
        onEditIcon(event) {
          editClick(event);
        },
        onItemClick(event) {
          itemClick(event);
        }
      });
    };
    let loop = null;
    const moveRef = ref(false);
    const showMaskRef = ref(false);
    const delClick = (event) => {
      emit("delIcon", event, props.item);
      event.stopPropagation();
    };
    const editClick = (event) => {
      emit("editIcon", event, props.item);
      event.stopPropagation();
    };
    const itemClick = (event) => {
      if (moveRef.value)
        return;
      emit("itemClick", event, props.item);
      event.stopPropagation();
    };
    const delLongClick = (event) => {
      emit("longDel", event, props.item);
      event.stopPropagation();
    };
    const holdingFunc = (event) => {
      loop = 0;
      showMaskRef.value = true;
      emit("longDown", event, props.item);
    };
    const holddownstart = (event) => {
      loop = setTimeout(() => {
        holdingFunc(event);
      }, 300);
    };
    const holddownmove = () => {
      clearTimeout(loop);
    };
    const holddownend = () => {
      clearTimeout(loop);
    };
    const hideMaskClick = () => {
      showMaskRef.value = false;
    };
    const copyCLick = (event) => {
      emit("longCopy", event, props.item);
      event.stopPropagation();
    };
    const setDefault = (event) => {
      emit("longSet", event, props.item);
      event.stopPropagation();
    };
    const maskClick = (event) => {
      if (loop != 0) {
        showMaskRef.value = false;
      }
      event.stopPropagation();
      event.preventDefault();
    };
    const swipeDelClick = (event) => {
      emit("swipeDel", event, props.item);
      event.stopPropagation();
    };
    const swipestart = () => {
      moveRef.value = false;
    };
    const swipemove = () => {
      moveRef.value = true;
    };
    return {
      renderCompontent,
      showMaskRef,
      itemClick,
      editClick,
      delClick,
      delLongClick,
      holddownstart,
      holddownmove,
      holddownend,
      copyCLick,
      hideMaskClick,
      setDefault,
      maskClick,
      swipeDelClick,
      swipestart,
      swipemove
    };
  }
});
const _hoisted_1 = {
  key: 0,
  class: "nut-addresslist-general"
};
const _hoisted_2 = /* @__PURE__ */ createElementVNode("div", { class: "nut-addresslist-mask-contain" }, [
  /* @__PURE__ */ createTextVNode(" \u590D\u5236"),
  /* @__PURE__ */ createElementVNode("br"),
  /* @__PURE__ */ createTextVNode("\u5730\u5740 ")
], -1);
const _hoisted_3 = [
  _hoisted_2
];
const _hoisted_4 = /* @__PURE__ */ createElementVNode("div", { class: "nut-addresslist-mask-contain" }, [
  /* @__PURE__ */ createTextVNode(" \u8BBE\u7F6E"),
  /* @__PURE__ */ createElementVNode("br"),
  /* @__PURE__ */ createTextVNode("\u9ED8\u8BA4 ")
], -1);
const _hoisted_5 = [
  _hoisted_4
];
const _hoisted_6 = /* @__PURE__ */ createElementVNode("div", { class: "nut-addresslist-mask-contain" }, [
  /* @__PURE__ */ createTextVNode(" \u5220\u9664"),
  /* @__PURE__ */ createElementVNode("br"),
  /* @__PURE__ */ createTextVNode("\u5730\u5740 ")
], -1);
const _hoisted_7 = [
  _hoisted_6
];
const _hoisted_8 = { class: "nut-addresslist-swipe" };
const _hoisted_9 = /* @__PURE__ */ createTextVNode("\u5220\u9664");
function _sfc_render$1(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_button = resolveComponent("nut-button");
  const _component_nut_swipe = resolveComponent("nut-swipe");
  return !_ctx.swipeEdition ? (openBlock(), createElementBlock("div", _hoisted_1, [
    (openBlock(), createBlock(resolveDynamicComponent(_ctx.renderCompontent()), {
      onTouchstart: _ctx.holddownstart,
      onTouchend: _ctx.holddownend,
      onTouchmove: _ctx.holddownmove
    }, {
      contentTop: withCtx(() => [
        renderSlot(_ctx.$slots, "contentInfo")
      ]),
      contentIcon: withCtx(() => [
        renderSlot(_ctx.$slots, "contentIcons")
      ]),
      contentAddr: withCtx(() => [
        renderSlot(_ctx.$slots, "contentAddrs")
      ]),
      _: 3
    }, 8, ["onTouchstart", "onTouchend", "onTouchmove"])),
    _ctx.longPress && _ctx.showMaskRef ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: "nut-addresslist-general__mask",
      onClick: _cache[3] || (_cache[3] = (...args) => _ctx.maskClick && _ctx.maskClick(...args))
    }, [
      renderSlot(_ctx.$slots, "longpressAll", {}, () => [
        createElementVNode("div", {
          class: "nut-addresslist-general__mask-copy",
          onClick: _cache[0] || (_cache[0] = (...args) => _ctx.copyCLick && _ctx.copyCLick(...args))
        }, _hoisted_3),
        createElementVNode("div", {
          class: "nut-addresslist-general__mask-set",
          onClick: _cache[1] || (_cache[1] = (...args) => _ctx.setDefault && _ctx.setDefault(...args))
        }, _hoisted_5),
        createElementVNode("div", {
          class: "nut-addresslist-general__mask-del",
          onClick: _cache[2] || (_cache[2] = (...args) => _ctx.delLongClick && _ctx.delLongClick(...args))
        }, _hoisted_7)
      ])
    ])) : createCommentVNode("", true),
    _ctx.showMaskRef ? (openBlock(), createElementBlock("div", {
      key: 1,
      class: "nut-addresslist__mask-bottom",
      onClick: _cache[4] || (_cache[4] = (...args) => _ctx.hideMaskClick && _ctx.hideMaskClick(...args))
    })) : createCommentVNode("", true)
  ])) : (openBlock(), createBlock(_component_nut_swipe, { key: 1 }, {
    right: withCtx(() => [
      renderSlot(_ctx.$slots, "swiperightbtn", {}, () => [
        createVNode(_component_nut_button, {
          shape: "square",
          style: { "height": "100%" },
          type: "danger",
          onClick: _ctx.swipeDelClick
        }, {
          default: withCtx(() => [
            _hoisted_9
          ]),
          _: 1
        }, 8, ["onClick"])
      ])
    ]),
    default: withCtx(() => [
      createElementVNode("div", _hoisted_8, [
        (openBlock(), createBlock(resolveDynamicComponent(_ctx.renderCompontent()), {
          onTouchmove: _ctx.swipemove,
          onTouchstart: _ctx.swipestart
        }, {
          contentTop: withCtx(() => [
            renderSlot(_ctx.$slots, "contentInfo")
          ]),
          contentIcon: withCtx(() => [
            renderSlot(_ctx.$slots, "contentIcons")
          ]),
          contentAddr: withCtx(() => [
            renderSlot(_ctx.$slots, "contentAddrs")
          ]),
          _: 3
        }, 8, ["onTouchmove", "onTouchstart"]))
      ])
    ]),
    _: 3
  }));
}
var GeneralShell = /* @__PURE__ */ _export_sfc(_sfc_main$1, [["render", _sfc_render$1]]);
const { componentName, create, translate } = createComponent("addresslist");
const _sfc_main = create({
  props: {
    data: {
      type: Array,
      default: []
    },
    longPress: {
      type: Boolean,
      default: false
    },
    swipeEdition: {
      type: Boolean,
      default: false
    },
    showBottomButton: {
      type: Boolean,
      default: true
    },
    dataMapOptions: {
      type: Object,
      default: {}
    }
  },
  components: {
    GeneralShell
  },
  emits: ["delIcon", "editIcon", "itemClick", "longCopy", "longSet", "longDel", "swipeDel", "add"],
  setup(props, { emit }) {
    const dataArray = ref([]);
    const dataInfo = reactive({
      id: 2,
      addressName: "\u59D3\u540D",
      phone: "123****4567",
      defaultAddress: false,
      fullAddress: "\u5317\u4EAC\u5E02\u901A\u5DDE\u533A\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5\u6D4B\u8BD5"
    });
    const classes = computed(() => {
      const prefixCls = componentName;
      return {
        [prefixCls]: true
      };
    });
    const trowelData = () => {
      if (Object.keys(props.dataMapOptions).length > 0) {
        dataArray.value = props.data.map((item) => {
          return floatData(dataInfo, item, props.dataMapOptions);
        });
      }
    };
    watch(
      () => props.data,
      () => trowelData(),
      { deep: true }
    );
    const clickDelIcon = (event, item) => {
      emit("delIcon", event, item);
      event.stopPropagation();
    };
    const clickEditIcon = (event, item) => {
      emit("editIcon", event, item);
      event.stopPropagation();
    };
    const clickContentItem = (event, item) => {
      emit("itemClick", event, item);
      event.stopPropagation();
    };
    const clickLongCopy = (event, item) => {
      emit("longCopy", event, item);
      event.stopPropagation();
    };
    const clickLongSet = (event, item) => {
      emit("longSet", event, item);
      event.stopPropagation();
    };
    const clickLongDel = (event, item) => {
      emit("longDel", event, item);
      event.stopPropagation();
    };
    const clickSwipeDel = (event, item) => {
      emit("swipeDel", event, item);
      event.stopPropagation();
    };
    const addAddress = (event) => {
      emit("add", event);
      event.stopPropagation();
    };
    onMounted(() => {
      trowelData();
    });
    return {
      classes,
      clickDelIcon,
      clickEditIcon,
      clickContentItem,
      clickLongCopy,
      clickLongSet,
      clickLongDel,
      clickSwipeDel,
      addAddress,
      dataArray,
      translate
    };
  }
});
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_general_shell = resolveComponent("general-shell");
  const _component_nut_button = resolveComponent("nut-button");
  return openBlock(), createElementBlock("div", {
    class: normalizeClass(_ctx.classes)
  }, [
    (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.dataArray, (item, index2) => {
      return openBlock(), createBlock(_component_general_shell, {
        key: index2,
        item,
        longPress: _ctx.longPress,
        swipeEdition: _ctx.swipeEdition,
        onDelIcon: _ctx.clickDelIcon,
        onEditIcon: _ctx.clickEditIcon,
        onItemClick: _ctx.clickContentItem,
        onSwipeDel: _ctx.clickSwipeDel,
        onLongCopy: _ctx.clickLongCopy,
        onLongSet: _ctx.clickLongSet,
        onLongDel: _ctx.clickLongDel
      }, createSlots({
        contentInfo: withCtx(() => [
          renderSlot(_ctx.$slots, "iteminfos")
        ]),
        contentIcons: withCtx(() => [
          renderSlot(_ctx.$slots, "itemicon")
        ]),
        contentAddrs: withCtx(() => [
          renderSlot(_ctx.$slots, "itemaddr")
        ]),
        _: 2
      }, [
        _ctx.longPress ? {
          name: "longpressAll",
          fn: withCtx(() => [
            renderSlot(_ctx.$slots, "longpressbtns")
          ])
        } : void 0,
        _ctx.swipeEdition ? {
          name: "swiperightbtn",
          fn: withCtx(() => [
            renderSlot(_ctx.$slots, "swiperight")
          ])
        } : void 0
      ]), 1032, ["item", "longPress", "swipeEdition", "onDelIcon", "onEditIcon", "onItemClick", "onSwipeDel", "onLongCopy", "onLongSet", "onLongDel"]);
    }), 128)),
    _ctx.showBottomButton ? (openBlock(), createElementBlock("div", {
      key: 0,
      class: "nut-addresslist__bottom",
      onClick: _cache[0] || (_cache[0] = (...args) => _ctx.addAddress && _ctx.addAddress(...args))
    }, [
      createVNode(_component_nut_button, {
        block: "",
        type: "danger"
      }, {
        default: withCtx(() => [
          createTextVNode(toDisplayString(_ctx.translate("addAddress")), 1)
        ]),
        _: 1
      })
    ])) : createCommentVNode("", true)
  ], 2);
}
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index as default };
