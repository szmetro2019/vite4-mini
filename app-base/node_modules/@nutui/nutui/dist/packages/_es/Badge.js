/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { reactive, computed, openBlock, createElementBlock, withDirectives, createElementVNode, normalizeStyle, renderSlot, vShow, toDisplayString, normalizeClass } from "vue";
import { c as createComponent } from "./component.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "../locale/lang";
const { create } = createComponent("badge");
const _sfc_main = create({
  props: {
    value: {
      type: [String, Number]
    },
    max: {
      type: Number,
      default: 1e4
    },
    dot: {
      type: Boolean,
      default: false
    },
    bubble: {
      type: Boolean,
      default: false
    },
    hidden: {
      type: Boolean,
      default: false
    },
    top: {
      type: String,
      default: "0"
    },
    right: {
      type: String,
      default: "0"
    },
    zIndex: {
      type: Number,
      default: 9
    },
    color: {
      type: String,
      default: ""
    }
  },
  setup(props) {
    const state = reactive({});
    const stl = computed(() => {
      return {
        top: `${props.top}px`,
        right: `${props.right}px`,
        zIndex: props.zIndex,
        background: props.color
      };
    });
    const content = computed(() => {
      if (props.dot)
        return;
      const value = props.value;
      const max = props.max;
      if (typeof value === "number" && typeof max === "number") {
        return max < value ? `${max}+` : value;
      }
      return value;
    });
    return {
      state,
      stl,
      content
    };
  }
});
const _hoisted_1 = { class: "nut-badge" };
const _hoisted_2 = ["textContent"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("view", _hoisted_1, [
    withDirectives(createElementVNode("view", {
      class: "slot-icons",
      style: normalizeStyle(_ctx.stl)
    }, [
      renderSlot(_ctx.$slots, "icons")
    ], 4), [
      [vShow, !_ctx.hidden && !_ctx.dot]
    ]),
    renderSlot(_ctx.$slots, "default"),
    withDirectives(createElementVNode("view", {
      textContent: toDisplayString(_ctx.content),
      class: normalizeClass(["nut-badge__content sup", { "is-dot": _ctx.dot, "is-bubble": !_ctx.dot && _ctx.bubble }]),
      style: normalizeStyle(_ctx.stl)
    }, null, 14, _hoisted_2), [
      [vShow, !_ctx.hidden && (_ctx.content || _ctx.dot)]
    ])
  ]);
}
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index as default };
