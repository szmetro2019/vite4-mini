/*!
* @nutui/nutui v3.3.8 Mon Jun 12 2023 11:24:18 GMT+0800 (中国标准时间)
* (c) 2022 @jdf2e.
* Released under the MIT License.
*/
import { c as createComponent } from "./component.js";
import { useSlots, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, createElementVNode, toDisplayString, createCommentVNode, renderSlot, Fragment, renderList, normalizeStyle, createBlock } from "vue";
import { p as popupProps } from "./props.js";
import { _ as _export_sfc } from "./plugin-vue_export-helper.js";
import "../locale/lang";
const { componentName, create } = createComponent("actionsheet");
const _sfc_main = create({
  props: {
    ...popupProps,
    cancelTxt: {
      type: String,
      default: ""
    },
    optionTag: {
      type: String,
      default: "name"
    },
    optionSubTag: {
      type: String,
      default: "subname"
    },
    chooseTagValue: {
      type: String,
      default: ""
    },
    title: {
      type: String,
      default: ""
    },
    color: {
      type: String,
      default: "#ee0a24"
    },
    description: {
      type: String,
      default: ""
    },
    menuItems: {
      type: Array,
      default: () => []
    },
    isWrapTeleport: {
      type: Boolean,
      default: true
    },
    closeAbled: {
      type: Boolean,
      default: true
    }
  },
  emits: ["cancel", "close", "choose", "update:visible"],
  setup(props, { emit }) {
    const slotDefault = !!useSlots().default;
    const classes = computed(() => {
      const prefixCls = componentName;
      return {
        [prefixCls]: true
      };
    });
    const isHighlight = (item) => {
      return props.chooseTagValue && props.chooseTagValue === item[props.optionTag] ? props.color : "";
    };
    const cancelActionSheet = () => {
      emit("cancel");
      emit("update:visible", false);
    };
    const chooseItem = (item, index2) => {
      if (!item.disable && !item.loading) {
        emit("choose", item, index2);
        emit("update:visible", false);
      }
    };
    const close = (e) => {
      emit("close", e);
      emit("update:visible", false);
    };
    return {
      slotDefault,
      isHighlight,
      cancelActionSheet,
      chooseItem,
      close,
      classes
    };
  }
});
const _hoisted_1 = { class: "nut-actionsheet-panel" };
const _hoisted_2 = {
  key: 0,
  class: "nut-actionsheet-title"
};
const _hoisted_3 = { key: 1 };
const _hoisted_4 = {
  key: 0,
  class: "nut-actionsheet-item desc"
};
const _hoisted_5 = {
  key: 1,
  class: "nut-actionsheet-menu"
};
const _hoisted_6 = ["onClick"];
const _hoisted_7 = { key: 1 };
const _hoisted_8 = { class: "subdesc" };
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  const _component_nut_icon = resolveComponent("nut-icon");
  const _component_nut_popup = resolveComponent("nut-popup");
  return openBlock(), createElementBlock("view", {
    class: normalizeClass(_ctx.classes)
  }, [
    createVNode(_component_nut_popup, {
      "pop-class": "popclass",
      visible: _ctx.visible,
      isWrapTeleport: _ctx.isWrapTeleport,
      position: "bottom",
      round: "",
      onClickOverlay: _ctx.close,
      closeOnClickOverlay: _ctx.closeAbled
    }, {
      default: withCtx(() => [
        createElementVNode("view", _hoisted_1, [
          _ctx.title ? (openBlock(), createElementBlock("view", _hoisted_2, toDisplayString(_ctx.title), 1)) : createCommentVNode("", true),
          renderSlot(_ctx.$slots, "default"),
          !_ctx.slotDefault ? (openBlock(), createElementBlock("view", _hoisted_3, [
            _ctx.description ? (openBlock(), createElementBlock("view", _hoisted_4, toDisplayString(_ctx.description), 1)) : createCommentVNode("", true),
            _ctx.menuItems.length ? (openBlock(), createElementBlock("view", _hoisted_5, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.menuItems, (item, index2) => {
                return openBlock(), createElementBlock("view", {
                  class: normalizeClass(["nut-actionsheet-item", { "nut-actionsheet-item-disabled": item.disable, "nut-actionsheet-item-loading": item.loading }]),
                  style: normalizeStyle({ color: _ctx.isHighlight(item) || item.color }),
                  key: index2,
                  onClick: ($event) => _ctx.chooseItem(item, index2)
                }, [
                  item.loading ? (openBlock(), createBlock(_component_nut_icon, {
                    key: 0,
                    name: "loading"
                  })) : (openBlock(), createElementBlock("view", _hoisted_7, toDisplayString(item[_ctx.optionTag]), 1)),
                  createElementVNode("view", _hoisted_8, toDisplayString(item[_ctx.optionSubTag]), 1)
                ], 14, _hoisted_6);
              }), 128))
            ])) : createCommentVNode("", true),
            _ctx.cancelTxt ? (openBlock(), createElementBlock("view", {
              key: 2,
              class: "nut-actionsheet-cancel",
              onClick: _cache[0] || (_cache[0] = (...args) => _ctx.cancelActionSheet && _ctx.cancelActionSheet(...args))
            }, toDisplayString(_ctx.cancelTxt), 1)) : createCommentVNode("", true)
          ])) : createCommentVNode("", true)
        ])
      ]),
      _: 3
    }, 8, ["visible", "isWrapTeleport", "onClickOverlay", "closeOnClickOverlay"])
  ], 2);
}
var index = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render]]);
export { index as default };
